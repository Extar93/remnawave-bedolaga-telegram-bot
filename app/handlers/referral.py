import logging
from aiogram import Dispatcher, types, F
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.crud.referral import get_referral_earnings_sum
from app.database.models import User
from app.keyboards.inline import get_referral_keyboard, get_back_keyboard
from app.localization.texts import get_texts
from app.utils.user_utils import get_user_referral_summary

logger = logging.getLogger(__name__)


async def show_referral_info(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)
    
    summary = await get_user_referral_summary(db, db_user.id)
    
    bot_username = (await callback.bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start={db_user.referral_code}"
    
    referral_text = f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
    
    referral_text += f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    referral_text += f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {summary['invited_count']}\n"
    referral_text += f"‚Ä¢ –°–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {summary['paid_referrals_count']}\n"
    referral_text += f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: {texts.format_price(summary['total_earned_kopeks'])}\n"
    referral_text += f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {texts.format_price(summary['month_earned_kopeks'])}\n\n"
    
    referral_text += f"üéÅ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–≥—Ä–∞–¥—ã:</b>\n"
    referral_text += f"‚Ä¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç: {texts.format_price(settings.REFERRAL_FIRST_TOPUP_BONUS_KOPEKS)} –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç {texts.format_price(settings.REFERRAL_MINIMUM_TOPUP_KOPEKS)}\n"
    referral_text += f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {texts.format_price(settings.REFERRAL_INVITER_BONUS_KOPEKS)}\n"
    referral_text += f"‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {settings.REFERRAL_COMMISSION_PERCENT}%\n\n"
    
    referral_text += f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
    referral_text += f"<code>{referral_link}</code>\n\n"
    referral_text += f"üÜî <b>–í–∞—à –∫–æ–¥:</b> <code>{db_user.referral_code}</code>\n\n"
    
    if summary['recent_earnings']:
        referral_text += f"üí∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:</b>\n"
        for earning in summary['recent_earnings'][:3]: 
            reason_text = {
                "referral_first_topup": "üéâ –ü–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                "referral_commission_topup": "üí∞ –ö–æ–º–∏—Å—Å–∏—è —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
                "referral_registration_pending": "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
            }.get(earning['reason'], earning['reason'])
            
            referral_text += f"‚Ä¢ {reason_text}: {texts.format_price(earning['amount_kopeks'])} –æ—Ç {earning['referral_name']}\n"
        referral_text += "\n"
    
    referral_text += "üì¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!"
    
    await callback.message.edit_text(
        referral_text,
        reply_markup=get_referral_keyboard(db_user.language),
        parse_mode="HTML"
    )
    await callback.answer()


async def create_invite_message(
    callback: types.CallbackQuery,
    db_user: User
):
    texts = get_texts(db_user.language)
    
    bot_username = (await callback.bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start={db_user.referral_code}"
    
    invite_text = f"üéâ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ VPN —Å–µ—Ä–≤–∏—Å—É!\n\n"
    invite_text += f"üíé –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç {texts.format_price(settings.REFERRAL_MINIMUM_TOPUP_KOPEKS)} —Ç—ã –ø–æ–ª—É—á–∏—à—å {texts.format_price(settings.REFERRAL_FIRST_TOPUP_BONUS_KOPEKS)} –±–æ–Ω—É—Å–æ–º –Ω–∞ –±–∞–ª–∞–Ω—Å!\n\n"
    invite_text += f"üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
    invite_text += f"üåç –°–µ—Ä–≤–µ—Ä—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É\n"
    invite_text += f"üîí –ù–∞–¥–µ–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞\n\n"
    invite_text += f"üëá –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n{referral_link}"
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(
                text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                switch_inline_query=invite_text 
            )
        ],
        [
            types.InlineKeyboardButton(
                text=texts.BACK,
                callback_data="menu_referrals"
            )
        ]
    ])
    
    await callback.message.edit_text(
        f"üìù <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª—é–±–æ–π —á–∞—Ç, –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ:\n\n"
        f"<code>{invite_text}</code>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


def register_handlers(dp: Dispatcher):
    
    dp.callback_query.register(
        show_referral_info,
        F.data == "menu_referrals"
    )
    
    dp.callback_query.register(
        create_invite_message,
        F.data == "referral_create_invite"
    )
