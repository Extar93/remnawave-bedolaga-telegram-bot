import logging
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.services.maintenance_service import maintenance_service
from app.keyboards.admin import get_maintenance_keyboard, get_admin_main_keyboard
from app.localization.texts import get_texts
from app.utils.decorators import admin_required, error_handler

logger = logging.getLogger(__name__)


class MaintenanceStates(StatesGroup):
    waiting_for_reason = State()


@admin_required
@error_handler
async def show_maintenance_panel(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞–º–∏"""
    texts = get_texts(db_user.language)
    
    status_info = maintenance_service.get_status_info()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
    status_emoji = "üîß" if status_info["is_active"] else "‚úÖ"
    status_text = "–í–∫–ª—é—á–µ–Ω" if status_info["is_active"] else "–í—ã–∫–ª—é—á–µ–Ω"
    
    api_emoji = "‚úÖ" if status_info["api_status"] else "‚ùå"
    api_text = "–î–æ—Å—Ç—É–ø–Ω–æ" if status_info["api_status"] else "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    
    monitoring_emoji = "üîÑ" if status_info["monitoring_active"] else "‚èπÔ∏è"
    monitoring_text = "–ó–∞–ø—É—â–µ–Ω" if status_info["monitoring_active"] else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∫–ª—é—á–µ–Ω–∏–∏
    enabled_info = ""
    if status_info["is_active"] and status_info["enabled_at"]:
        enabled_time = status_info["enabled_at"].strftime("%d.%m.%Y %H:%M:%S")
        enabled_info = f"\nüìÖ <b>–í–∫–ª—é—á–µ–Ω:</b> {enabled_time}"
        if status_info["reason"]:
            enabled_info += f"\nüìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {status_info['reason']}"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
    last_check_info = ""
    if status_info["last_check"]:
        last_check_time = status_info["last_check"].strftime("%H:%M:%S")
        last_check_info = f"\nüïê <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {last_check_time}"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
    failures_info = ""
    if status_info["consecutive_failures"] > 0:
        failures_info = f"\n‚ö†Ô∏è <b>–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥:</b> {status_info['consecutive_failures']}"
    
    message_text = f"""
üîß <b>–†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
{api_emoji} <b>API RemnaWave:</b> {api_text}
{monitoring_emoji} <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b> {monitoring_text}
‚è±Ô∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {status_info['check_interval']}—Å
ü§ñ <b>–ê–≤—Ç–æ–≤–∫–ª—é—á–µ–Ω–∏–µ:</b> {'–í–∫–ª—é—á–µ–Ω–æ' if status_info['auto_enable_configured'] else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
{enabled_info}
{last_check_info}
{failures_info}

‚ÑπÔ∏è <i>–í —Ä–µ–∂–∏–º–µ —Ç–µ—Ö—Ä–∞–±–æ—Ç –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.</i>
"""
    
    await callback.message.edit_text(
        message_text,
        reply_markup=get_maintenance_keyboard(db_user.language, status_info["is_active"], status_info["monitoring_active"])
    )
    await callback.answer()


@admin_required
@error_handler
async def toggle_maintenance_mode(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç"""
    is_active = maintenance_service.is_maintenance_active()
    
    if is_active:
        # –í—ã–∫–ª—é—á–∞–µ–º —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã
        success = await maintenance_service.disable_maintenance()
        if success:
            await callback.answer("–†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω", show_alert=True)
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç", show_alert=True)
    else:
        # –í–∫–ª—é—á–∞–µ–º —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É
        await state.set_state(MaintenanceStates.waiting_for_reason)
        await callback.message.edit_text(
            "üîß <b>–í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Ö—Ä–∞–±–æ—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="maintenance_panel")]
            ])
        )
    
    await callback.answer()


@admin_required
@error_handler
async def process_maintenance_reason(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã —Ç–µ—Ö—Ä–∞–±–æ—Ç"""
    current_state = await state.get_state()
    
    if current_state != MaintenanceStates.waiting_for_reason:
        return
    
    reason = None
    if message.text and message.text != "/skip":
        reason = message.text[:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    
    success = await maintenance_service.enable_maintenance(reason=reason, auto=False)
    
    if success:
        response_text = "–†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤–∫–ª—é—á–µ–Ω"
        if reason:
            response_text += f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    else:
        response_text = "–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç"
    
    await message.answer(response_text)
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
    status_info = maintenance_service.get_status_info()
    await message.answer(
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞–º–∏:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîß –ü–∞–Ω–µ–ª—å —Ç–µ—Ö—Ä–∞–±–æ—Ç", callback_data="maintenance_panel")]
        ])
    )


@admin_required  
@error_handler
async def toggle_monitoring(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API"""
    status_info = maintenance_service.get_status_info()
    
    if status_info["monitoring_active"]:
        success = await maintenance_service.stop_monitoring()
        message = "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if success else "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    else:
        success = await maintenance_service.start_monitoring()
        message = "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω" if success else "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    
    await callback.answer(message, show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å
    await show_maintenance_panel(callback, db_user, db, None)


@admin_required
@error_handler
async def force_api_check(
    callback: types.CallbackQuery,
    db_user: User, 
    db: AsyncSession
):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API"""
    await callback.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ API...", show_alert=False)
    
    check_result = await maintenance_service.force_api_check()
    
    if check_result["success"]:
        status_text = "–¥–æ—Å—Ç—É–ø–Ω–æ" if check_result["api_available"] else "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        message = f"API {status_text}\n–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {check_result['response_time']}—Å"
    else:
        message = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    await callback.message.answer(message)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å
    await show_maintenance_panel(callback, db_user, db, None)


@admin_required
@error_handler
async def back_to_admin_panel(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω–∫—É"""
    texts = get_texts(db_user.language)
    
    await callback.message.edit_text(
        texts.ADMIN_PANEL,
        reply_markup=get_admin_main_keyboard(db_user.language)
    )
    await callback.answer()


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç"""
    
    # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞–º–∏
    dp.callback_query.register(
        show_maintenance_panel,
        F.data == "maintenance_panel"
    )
    
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç
    dp.callback_query.register(
        toggle_maintenance_mode,
        F.data == "maintenance_toggle"
    )
    
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    dp.callback_query.register(
        toggle_monitoring,
        F.data == "maintenance_monitoring"
    )
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API
    dp.callback_query.register(
        force_api_check,
        F.data == "maintenance_check_api"
    )
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω–∫—É
    dp.callback_query.register(
        back_to_admin_panel,
        F.data == "admin_panel"
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã —Ç–µ—Ö—Ä–∞–±–æ—Ç
    dp.message.register(
        process_maintenance_reason,
        MaintenanceStates.waiting_for_reason
    )