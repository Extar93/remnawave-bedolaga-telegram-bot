import logging
from typing import Iterable, List, Tuple

from aiogram import Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.keyboards.admin import get_admin_pricing_keyboard
from app.localization.texts import get_texts
from app.services.system_settings_service import bot_configuration_service
from app.states import PricingStates
from app.utils.decorators import admin_required, error_handler


logger = logging.getLogger(__name__)

SUBSCRIPTION_PRICE_ENTRIES: List[Tuple[str, str, str]] = [
    ("base", "BASE_SUBSCRIPTION_PRICE", "–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞"),
    ("14", "PRICE_14_DAYS", "14 –¥–Ω–µ–π"),
    ("30", "PRICE_30_DAYS", "30 –¥–Ω–µ–π"),
    ("60", "PRICE_60_DAYS", "60 –¥–Ω–µ–π"),
    ("90", "PRICE_90_DAYS", "90 –¥–Ω–µ–π"),
    ("180", "PRICE_180_DAYS", "180 –¥–Ω–µ–π"),
    ("360", "PRICE_360_DAYS", "360 –¥–Ω–µ–π"),
]

TRAFFIC_PRICE_ENTRIES: List[Tuple[str, str, str]] = [
    ("5", "PRICE_TRAFFIC_5GB", "5 –ì–ë"),
    ("10", "PRICE_TRAFFIC_10GB", "10 –ì–ë"),
    ("25", "PRICE_TRAFFIC_25GB", "25 –ì–ë"),
    ("50", "PRICE_TRAFFIC_50GB", "50 –ì–ë"),
    ("100", "PRICE_TRAFFIC_100GB", "100 –ì–ë"),
    ("250", "PRICE_TRAFFIC_250GB", "250 –ì–ë"),
    ("500", "PRICE_TRAFFIC_500GB", "500 –ì–ë"),
    ("1000", "PRICE_TRAFFIC_1000GB", "1000 –ì–ë"),
    ("unlimited", "PRICE_TRAFFIC_UNLIMITED", "–ë–µ–∑–ª–∏–º–∏—Ç"),
]

DEVICE_PRICE_ENTRY: Tuple[str, str, str] = (
    "devices",
    "PRICE_PER_DEVICE",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
)

MAX_PRICE_RUBLES = 1_000_000


def _format_price(value: int) -> str:
    return settings.format_price(int(value))


def _build_price_buttons(
    entries: Iterable[Tuple[str, str, str]],
    prefix: str,
) -> List[List[types.InlineKeyboardButton]]:
    buttons: List[List[types.InlineKeyboardButton]] = []
    row: List[types.InlineKeyboardButton] = []

    for token, key, label in entries:
        current_value = bot_configuration_service.get_current_value(key)
        button = types.InlineKeyboardButton(
            text=f"{label} ‚Äî {_format_price(current_value)}",
            callback_data=f"admin_pricing_edit_{prefix}_{token}",
        )
        row.append(button)
        if len(row) == 2:
            buttons.append(row)
            row = []

    if row:
        buttons.append(row)

    return buttons


async def _prompt_price_input(
    callback: types.CallbackQuery,
    state: FSMContext,
    key: str,
    label: str,
    return_callback: str,
    language: str,
) -> None:
    texts = get_texts(language)
    current_value = bot_configuration_service.get_current_value(key)
    current_price = _format_price(current_value)

    await state.set_state(PricingStates.waiting_for_value)
    await state.update_data(
        target_key=key,
        target_label=label,
        return_callback=return_callback,
    )

    prompt_lines = [
        texts.t("ADMIN_PRICING_EDIT_TITLE", "üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã</b>"),
        "",
        texts.t("ADMIN_PRICING_CURRENT_PRICE", "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}").format(
            price=current_price
        ),
        texts.t("ADMIN_PRICING_PROMPT", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è {name}:").format(
            name=label
        ),
        texts.t(
            "ADMIN_PRICING_ENTER_PRICE",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–ø–µ–π–∫–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É).",
        ),
        texts.t("ADMIN_PRICING_CANCEL_HINT", "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ."),
    ]

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_PRICING_CANCEL", "‚ùå –û—Ç–º–µ–Ω–∞"),
                    callback_data=return_callback,
                )
            ]
        ]
    )

    await callback.message.edit_text(
        "\n".join(prompt_lines),
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def show_pricing_menu(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession,
):
    await state.clear()
    texts = get_texts(db_user.language)

    summary_lines = [
        texts.t("ADMIN_PRICING_TITLE", "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏</b>"),
        "",
        texts.t(
            "ADMIN_PRICING_DESCRIPTION",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–æ–∫, —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.",
        ),
        "",
    ]

    summary_lines.append(texts.t("ADMIN_PRICING_OVERVIEW", "–ö–ª—é—á–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:"))
    summary_lines.append(
        f"‚Ä¢ 30 –¥–Ω–µ–π: {_format_price(settings.PRICE_30_DAYS)}"
    )
    summary_lines.append(
        f"‚Ä¢ 90 –¥–Ω–µ–π: {_format_price(settings.PRICE_90_DAYS)}"
    )
    summary_lines.append(
        f"‚Ä¢ {_format_price(settings.PRICE_PER_DEVICE)} ‚Äî {texts.t('ADMIN_PRICING_DEVICE_SHORT', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')}"
    )

    await callback.message.edit_text(
        "\n".join(summary_lines),
        reply_markup=get_admin_pricing_keyboard(db_user.language),
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def show_subscription_prices(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession,
):
    await state.clear()
    texts = get_texts(db_user.language)

    lines = [
        texts.t("ADMIN_PRICING_SUBSCRIPTIONS_TITLE", "üìÖ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–æ–∫</b>"),
        "",
        texts.t(
            "ADMIN_PRICING_SUBSCRIPTIONS_HELP",
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä–∏–æ–¥, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É. –ó–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω—ã –≤ –º–µ—Å—è—Ü–∞—Ö.",
        ),
        "",
    ]

    for _token, key, label in SUBSCRIPTION_PRICE_ENTRIES:
        lines.append(f"‚Ä¢ {label}: {_format_price(bot_configuration_service.get_current_value(key))}")

    keyboard_rows = _build_price_buttons(SUBSCRIPTION_PRICE_ENTRIES, "subscription")
    keyboard_rows.append(
        [types.InlineKeyboardButton(text=texts.BACK, callback_data="admin_pricing")]
    )

    await callback.message.edit_text(
        "\n".join(lines),
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows),
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def show_traffic_prices(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession,
):
    await state.clear()
    texts = get_texts(db_user.language)

    lines = [
        texts.t("ADMIN_PRICING_TRAFFIC_TITLE", "üì¶ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞</b>"),
        "",
        texts.t(
            "ADMIN_PRICING_TRAFFIC_HELP",
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞–∫–µ—Ç, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É. –¶–µ–Ω–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä—ë–º —Ç—Ä–∞—Ñ–∏–∫–∞.",
        ),
        "",
    ]

    for _token, key, label in TRAFFIC_PRICE_ENTRIES:
        lines.append(f"‚Ä¢ {label}: {_format_price(bot_configuration_service.get_current_value(key))}")

    keyboard_rows = _build_price_buttons(TRAFFIC_PRICE_ENTRIES, "traffic")
    keyboard_rows.append(
        [types.InlineKeyboardButton(text=texts.BACK, callback_data="admin_pricing")]
    )

    await callback.message.edit_text(
        "\n".join(lines),
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows),
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def show_device_price(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession,
):
    await state.clear()
    texts = get_texts(db_user.language)

    _token, key, label = DEVICE_PRICE_ENTRY
    current_value = bot_configuration_service.get_current_value(key)

    lines = [
        texts.t("ADMIN_PRICING_DEVICES_TITLE", "üì± <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b>"),
        "",
        texts.t(
            "ADMIN_PRICING_DEVICES_HELP",
            "–¶–µ–Ω–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∑–∞ –∫–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–≤–µ—Ä—Ö –±–∞–∑–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏.",
        ),
        "",
        f"{label}: {_format_price(current_value)}",
    ]

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_PRICING_EDIT_BUTTON", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É"),
                    callback_data="admin_pricing_edit_devices",
                )
            ],
            [types.InlineKeyboardButton(text=texts.BACK, callback_data="admin_pricing")],
        ]
    )

    await callback.message.edit_text(
        "\n".join(lines),
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def start_subscription_price_edit(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession,
):
    token = callback.data.split("_")[-1]
    for entry_token, key, label in SUBSCRIPTION_PRICE_ENTRIES:
        if entry_token == token:
            await _prompt_price_input(
                callback,
                state,
                key,
                label,
                "admin_pricing_subscriptions",
                db_user.language,
            )
            return

    await callback.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)


@admin_required
@error_handler
async def start_traffic_price_edit(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession,
):
    token = callback.data.split("_")[-1]
    for entry_token, key, label in TRAFFIC_PRICE_ENTRIES:
        if entry_token == token:
            await _prompt_price_input(
                callback,
                state,
                key,
                label,
                "admin_pricing_traffic",
                db_user.language,
            )
            return

    await callback.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)


@admin_required
@error_handler
async def start_device_price_edit(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession,
):
    _token, key, label = DEVICE_PRICE_ENTRY
    await _prompt_price_input(
        callback,
        state,
        key,
        label,
        "admin_pricing_devices",
        db_user.language,
    )


@admin_required
@error_handler
async def process_price_input(
    message: types.Message,
    state: FSMContext,
    db_user: User,
    db: AsyncSession,
):
    data = await state.get_data()
    key = data.get("target_key")
    label = data.get("target_label", "")
    return_callback = data.get("return_callback", "admin_pricing")
    texts = get_texts(db_user.language)

    if not key:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–∑ –º–µ–Ω—é —Ü–µ–Ω.")
        await state.clear()
        return

    raw_text = (message.text or "").strip()
    if raw_text.lower() in {"cancel", "–æ—Ç–º–µ–Ω–∞"}:
        await state.clear()
        await message.answer(
            texts.t("ADMIN_PRICING_CANCELLED", "–û—Ç–º–µ–Ω–µ–Ω–æ."),
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text=texts.BACK,
                            callback_data=return_callback,
                        )
                    ]
                ]
            ),
        )
        return

    try:
        price_rubles = float(raw_text.replace(",", "."))
    except ValueError:
        await message.answer(
            texts.t(
                "ADMIN_PRICING_INVALID_PRICE",
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 199.90",
            )
        )
        return

    if price_rubles < 0:
        await message.answer(
            texts.t("ADMIN_PRICING_INVALID_PRICE", "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 199.90"),
        )
        return

    if price_rubles > MAX_PRICE_RUBLES:
        await message.answer(
            texts.t(
                "ADMIN_PRICING_TOO_HIGH",
                "‚ùå –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ 1 000 000 ‚ÇΩ.",
            )
        )
        return

    price_kopeks = int(round(price_rubles * 100))

    await bot_configuration_service.set_value(db, key, price_kopeks)
    await state.clear()

    logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ %s: %s ‚ÇΩ", key, price_rubles)

    confirmation = texts.t(
        "ADMIN_PRICING_PRICE_UPDATED",
        "‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {name} ‚Äî {price}",
    ).format(name=label or key, price=_format_price(price_kopeks))

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_PRICING_BACK_TO_SECTION", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª—É"),
                    callback_data=return_callback,
                )
            ]
        ]
    )

    await message.answer(confirmation, reply_markup=keyboard, parse_mode="HTML")


def register_handlers(dp: Dispatcher) -> None:
    dp.callback_query.register(show_pricing_menu, F.data == "admin_pricing")
    dp.callback_query.register(
        show_subscription_prices, F.data == "admin_pricing_subscriptions"
    )
    dp.callback_query.register(
        show_traffic_prices, F.data == "admin_pricing_traffic"
    )
    dp.callback_query.register(show_device_price, F.data == "admin_pricing_devices")
    dp.callback_query.register(
        start_subscription_price_edit,
        F.data.startswith("admin_pricing_edit_subscription_"),
    )
    dp.callback_query.register(
        start_traffic_price_edit, F.data.startswith("admin_pricing_edit_traffic_"),
    )
    dp.callback_query.register(
        start_device_price_edit, F.data == "admin_pricing_edit_devices"
    )
    dp.message.register(
        process_price_input,
        PricingStates.waiting_for_value,
    )

