import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from app.config import settings
from app.database.database import get_db
from app.services.monitoring_service import monitoring_service
from app.services.notification_settings_service import AutoNotificationSettingsService
from app.utils.decorators import admin_required
from app.utils.pagination import paginate_list
from app.keyboards.admin import get_monitoring_keyboard, get_admin_main_keyboard
from app.localization.texts import get_texts
from app.states import MonitoringNotificationStates

logger = logging.getLogger(__name__)
router = Router()


def _toggle_text(enabled: bool) -> str:
    return "‚úÖ –í–∫–ª" if enabled else "‚ùå –í—ã–∫–ª"


def _build_notification_settings(language: str) -> tuple[str, InlineKeyboardMarkup]:
    texts = get_texts(language)

    trial_1h_enabled = AutoNotificationSettingsService.is_trial_1h_enabled()
    trial_24h_enabled = AutoNotificationSettingsService.is_trial_24h_enabled()
    expired_day1_enabled = AutoNotificationSettingsService.is_expired_day1_enabled()

    expired_day23_enabled = AutoNotificationSettingsService.is_expired_day23_enabled()
    day23_discount = AutoNotificationSettingsService.get_expired_day23_discount()
    day23_valid = AutoNotificationSettingsService.get_expired_day23_valid_hours()
    window_start, window_end = AutoNotificationSettingsService.get_expired_day23_window()

    expired_dayN_enabled = AutoNotificationSettingsService.is_expired_dayN_enabled()
    dayN_discount = AutoNotificationSettingsService.get_expired_dayN_discount()
    dayN_valid = AutoNotificationSettingsService.get_expired_dayN_valid_hours()
    dayN_threshold = AutoNotificationSettingsService.get_expired_dayN_threshold()

    overview_lines = [
        f"‚è±Ô∏è –¢—Ä–∏–∞–ª +1 —á–∞—Å ‚Äî {'–≤–∫–ª' if trial_1h_enabled else '–≤—ã–∫–ª'}",
        f"üïõ –¢—Ä–∏–∞–ª +24 —á–∞—Å–∞ ‚Äî {'–≤–∫–ª' if trial_24h_enabled else '–≤—ã–∫–ª'}",
        f"üìÜ –ò—Å—Ç—ë–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (1 —Å—É—Ç–∫–∏) ‚Äî {'–≤–∫–ª' if expired_day1_enabled else '–≤—ã–∫–ª'}",
        (
            f"üéØ {window_start}-{window_end} –¥–Ω–µ–π –±–µ–∑ –ø—Ä–æ–¥–ª–µ–Ω–∏—è ‚Äî "
            f"{'–≤–∫–ª' if expired_day23_enabled else '–≤—ã–∫–ª'} ‚Ä¢ —Å–∫–∏–¥–∫–∞ {day23_discount}% –Ω–∞ {day23_valid} —á"
        ),
        (
            f"üî• ‚â•{dayN_threshold} –¥–Ω–µ–π –±–µ–∑ –ø—Ä–æ–¥–ª–µ–Ω–∏—è ‚Äî "
            f"{'–≤–∫–ª' if expired_dayN_enabled else '–≤—ã–∫–ª'} ‚Ä¢ —Å–∫–∏–¥–∫–∞ {dayN_discount}% –Ω–∞ {dayN_valid} —á"
        ),
    ]

    text = (
        "üîî <b>–ê–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
        + "\n".join(overview_lines)
        + "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è, –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"‚è±Ô∏è –¢—Ä–∏–∞–ª +1 —á–∞—Å: {_toggle_text(trial_1h_enabled)}",
                    callback_data="admin_mon_notif_toggle_trial_1h",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üïõ –¢—Ä–∏–∞–ª +24 —á–∞—Å–∞: {_toggle_text(trial_24h_enabled)}",
                    callback_data="admin_mon_notif_toggle_trial_24h",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üìÜ 1 —Å—É—Ç–∫–∏ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {_toggle_text(expired_day1_enabled)}",
                    callback_data="admin_mon_notif_toggle_expired_day1",
                )
            ],
            [
                InlineKeyboardButton(
                    text=(
                        f"üéØ {window_start}-{window_end} –¥–Ω.: "
                        f"{_toggle_text(expired_day23_enabled)} ({day23_discount}%)"
                    ),
                    callback_data="admin_mon_notif_toggle_expired_day23",
                ),
                InlineKeyboardButton(
                    text="‚úèÔ∏è %",
                    callback_data="admin_mon_notif_set_day23_discount",
                ),
            ],
            [
                InlineKeyboardButton(
                    text=(
                        f"üî• ‚â•{dayN_threshold} –¥–Ω.: "
                        f"{_toggle_text(expired_dayN_enabled)} ({dayN_discount}%)"
                    ),
                    callback_data="admin_mon_notif_toggle_expired_dayN",
                ),
                InlineKeyboardButton(
                    text="‚úèÔ∏è %",
                    callback_data="admin_mon_notif_set_dayN_discount",
                ),
                InlineKeyboardButton(
                    text="‚úèÔ∏è N",
                    callback_data="admin_mon_notif_set_dayN_threshold",
                ),
            ],
            [InlineKeyboardButton(text=texts.BACK, callback_data="admin_monitoring")],
        ]
    )

    return text, keyboard


@router.callback_query(F.data == "admin_monitoring")
@admin_required
async def admin_monitoring_menu(callback: CallbackQuery):
    try:
        async for db in get_db():
            status = await monitoring_service.get_monitoring_status(db)
            
            running_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if status['is_running'] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            last_update = status['last_update'].strftime('%H:%M:%S') if status['last_update'] else "–ù–∏–∫–æ–≥–¥–∞"
            
            text = f"""
üîç <b>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {running_status}
üïê <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {last_update}
‚öôÔ∏è <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {settings.MONITORING_INTERVAL} –º–∏–Ω

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {status['stats_24h']['total_events']}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {status['stats_24h']['successful']}
‚Ä¢ –û—à–∏–±–æ–∫: {status['stats_24h']['failed']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {status['stats_24h']['success_rate']}%

üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
            
            keyboard = get_monitoring_keyboard()
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data == "admin_mon_notifications")
@admin_required
async def monitoring_notifications_menu(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        language = callback.from_user.language_code or "ru"
        text, keyboard = _build_notification_settings(language)
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "admin_mon_notif_toggle_trial_1h")
@admin_required
async def toggle_trial_1h_reminder(callback: CallbackQuery, state: FSMContext):
    AutoNotificationSettingsService.set_trial_1h_enabled(
        not AutoNotificationSettingsService.is_trial_1h_enabled()
    )
    await monitoring_notifications_menu(callback, state)


@router.callback_query(F.data == "admin_mon_notif_toggle_trial_24h")
@admin_required
async def toggle_trial_24h_reminder(callback: CallbackQuery, state: FSMContext):
    AutoNotificationSettingsService.set_trial_24h_enabled(
        not AutoNotificationSettingsService.is_trial_24h_enabled()
    )
    await monitoring_notifications_menu(callback, state)


@router.callback_query(F.data == "admin_mon_notif_toggle_expired_day1")
@admin_required
async def toggle_expired_day1(callback: CallbackQuery, state: FSMContext):
    AutoNotificationSettingsService.set_expired_day1_enabled(
        not AutoNotificationSettingsService.is_expired_day1_enabled()
    )
    await monitoring_notifications_menu(callback, state)


@router.callback_query(F.data == "admin_mon_notif_toggle_expired_day23")
@admin_required
async def toggle_expired_day23(callback: CallbackQuery, state: FSMContext):
    AutoNotificationSettingsService.set_expired_day23_enabled(
        not AutoNotificationSettingsService.is_expired_day23_enabled()
    )
    await monitoring_notifications_menu(callback, state)


@router.callback_query(F.data == "admin_mon_notif_toggle_expired_dayN")
@admin_required
async def toggle_expired_dayN(callback: CallbackQuery, state: FSMContext):
    AutoNotificationSettingsService.set_expired_dayN_enabled(
        not AutoNotificationSettingsService.is_expired_dayN_enabled()
    )
    await monitoring_notifications_menu(callback, state)


@router.callback_query(F.data == "admin_mon_notif_set_day23_discount")
@admin_required
async def start_set_day23_discount(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(MonitoringNotificationStates.waiting_for_day23_discount)
        language = callback.from_user.language_code or "ru"
        texts = get_texts(language)
        current = AutoNotificationSettingsService.get_expired_day23_discount()
        prompt = (
            "üéØ <b>–°–∫–∏–¥–∫–∞ –Ω–∞ 2-3 —Å—É—Ç–∫–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current}%"
        )
        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=texts.BACK, callback_data="admin_mon_notifications")]]
        )
        await callback.message.edit_text(prompt, parse_mode="HTML", reply_markup=back_keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–∫–∏–¥–∫–∏ –¥–ª—è 2-3 —Å—É—Ç–æ–∫: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "admin_mon_notif_set_dayN_discount")
@admin_required
async def start_set_dayN_discount(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(MonitoringNotificationStates.waiting_for_dayN_discount)
        language = callback.from_user.language_code or "ru"
        texts = get_texts(language)
        current = AutoNotificationSettingsService.get_expired_dayN_discount()
        prompt = (
            "üî• <b>–ë–æ–ª—å—à–∞—è —Å–∫–∏–¥–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (0-100), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Å–ø—É—Å—Ç—è N —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current}%"
        )
        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=texts.BACK, callback_data="admin_mon_notifications")]]
        )
        await callback.message.edit_text(prompt, parse_mode="HTML", reply_markup=back_keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–æ–ª—å—à–æ–π —Å–∫–∏–¥–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "admin_mon_notif_set_dayN_threshold")
@admin_required
async def start_set_dayN_threshold(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(MonitoringNotificationStates.waiting_for_dayN_threshold)
        language = callback.from_user.language_code or "ru"
        texts = get_texts(language)
        current = AutoNotificationSettingsService.get_expired_dayN_threshold()
        prompt = (
            "üìÖ <b>–ü–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª—å—à–æ–π —Å–∫–∏–¥–∫–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å—É—Ç–æ–∫ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤—Ç–æ—Ä—É—é —Å–∫–∏–¥–∫—É.\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–µ–Ω—å—à–µ 4, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current}"
        )
        back_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=texts.BACK, callback_data="admin_mon_notifications")]]
        )
        await callback.message.edit_text(prompt, parse_mode="HTML", reply_markup=back_keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –±–æ–ª—å—à–æ–π —Å–∫–∏–¥–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.message(MonitoringNotificationStates.waiting_for_day23_discount)
@admin_required
async def handle_day23_discount(message: Message, state: FSMContext):
    value_raw = (message.text or "").strip()
    try:
        value = int(value_raw)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
        return

    if value < 0 or value > 100:
        await message.answer("‚ùå –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–∫–∏–¥–∫–∏: 0-100")
        return

    AutoNotificationSettingsService.set_expired_day23_discount(value)
    await state.clear()
    texts = get_texts(message.from_user.language_code or "ru")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=texts.BACK, callback_data="admin_mon_notifications")]]
    )
    await message.answer(f"‚úÖ –°–∫–∏–¥–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {value}%", reply_markup=keyboard)


@router.message(MonitoringNotificationStates.waiting_for_dayN_discount)
@admin_required
async def handle_dayN_discount(message: Message, state: FSMContext):
    value_raw = (message.text or "").strip()
    try:
        value = int(value_raw)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
        return

    if value < 0 or value > 100:
        await message.answer("‚ùå –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–∫–∏–¥–∫–∏: 0-100")
        return

    AutoNotificationSettingsService.set_expired_dayN_discount(value)
    await state.clear()
    texts = get_texts(message.from_user.language_code or "ru")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=texts.BACK, callback_data="admin_mon_notifications")]]
    )
    await message.answer(f"‚úÖ –°–∫–∏–¥–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {value}%", reply_markup=keyboard)


@router.message(MonitoringNotificationStates.waiting_for_dayN_threshold)
@admin_required
async def handle_dayN_threshold(message: Message, state: FSMContext):
    value_raw = (message.text or "").strip()
    try:
        days = int(value_raw)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º 4)")
        return

    if days < 4:
        await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî 4")
        return

    if days > 60:
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî 60 —Å—É—Ç–æ–∫")
        return

    AutoNotificationSettingsService.set_expired_dayN_threshold(days)
    await state.clear()
    texts = get_texts(message.from_user.language_code or "ru")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=texts.BACK, callback_data="admin_mon_notifications")]]
    )
    await message.answer(f"‚úÖ –ü–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {days} —Å—É—Ç–æ–∫", reply_markup=keyboard)


@router.callback_query(F.data == "admin_mon_start")
@admin_required
async def start_monitoring_callback(callback: CallbackQuery):
    try:
        if monitoring_service.is_running:
            await callback.answer("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        if not monitoring_service.bot:
            monitoring_service.bot = callback.bot
        
        asyncio.create_task(monitoring_service.start_monitoring())
        
        await callback.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
        
        await admin_monitoring_menu(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_stop")
@admin_required
async def stop_monitoring_callback(callback: CallbackQuery):
    try:
        if not monitoring_service.is_running:
            await callback.answer("‚ÑπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        monitoring_service.stop_monitoring()
        await callback.answer("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        
        await admin_monitoring_menu(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_force_check")
@admin_required
async def force_check_callback(callback: CallbackQuery):
    try:
        await callback.answer("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫...")
        
        async for db in get_db():
            results = await monitoring_service.force_check_subscriptions(db)
            
            text = f"""
‚úÖ <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>
‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {results['expired']}
‚Ä¢ –ò—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {results['expiring']}
‚Ä¢ –ì–æ—Ç–æ–≤—ã—Ö –∫ –∞–≤—Ç–æ–æ–ø–ª–∞—Ç–µ: {results['autopay_ready']}

üïê <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.now().strftime('%H:%M:%S')}

–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
"""
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
            ])
            
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}", show_alert=True)


@router.callback_query(F.data.startswith("admin_mon_logs"))
@admin_required
async def monitoring_logs_callback(callback: CallbackQuery):
    try:
        page = 1
        if "_page_" in callback.data:
            page = int(callback.data.split("_page_")[1])
        
        async for db in get_db():
            all_logs = await monitoring_service.get_monitoring_logs(db, limit=1000)
            
            if not all_logs:
                text = "üìã <b>–õ–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç—ã</b>\n\n–°–∏—Å—Ç–µ–º–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."
                keyboard = get_monitoring_logs_back_keyboard()
                await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
                return
            
            per_page = 8
            paginated_logs = paginate_list(all_logs, page=page, per_page=per_page)
            
            text = f"üìã <b>–õ–æ–≥–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b> (—Å—Ç—Ä. {page}/{paginated_logs.total_pages})\n\n"
            
            for log in paginated_logs.items:
                icon = "‚úÖ" if log['is_success'] else "‚ùå"
                time_str = log['created_at'].strftime('%m-%d %H:%M')
                event_type = log['event_type'].replace('_', ' ').title()
                
                message = log['message']
                if len(message) > 45:
                    message = message[:45] + "..."
                
                text += f"{icon} <code>{time_str}</code> {event_type}\n"
                text += f"   üìÑ {message}\n\n"
            
            total_success = sum(1 for log in all_logs if log['is_success'])
            total_failed = len(all_logs) - total_success
            success_rate = round(total_success / len(all_logs) * 100, 1) if all_logs else 0
            
            text += f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(all_logs)}\n"
            text += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {total_success}\n"
            text += f"‚Ä¢ –û—à–∏–±–æ–∫: {total_failed}\n"
            text += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate}%"
            
            keyboard = get_monitoring_logs_keyboard(page, paginated_logs.total_pages)
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤", show_alert=True)


@router.callback_query(F.data == "admin_mon_clear_logs")
@admin_required
async def clear_logs_callback(callback: CallbackQuery):
    try:
        async for db in get_db():
            deleted_count = await monitoring_service.cleanup_old_logs(db, days=0) 
            
            if deleted_count > 0:
                await callback.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤")
            else:
                await callback.answer("‚ÑπÔ∏è –õ–æ–≥–∏ —É–∂–µ –ø—É—Å—Ç—ã")
            
            await monitoring_logs_callback(callback)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_test_notifications")
@admin_required
async def test_notifications_callback(callback: CallbackQuery):
    try:
        test_message = f"""
üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if monitoring_service.is_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'üü¢ –í–∫–ª—é—á–µ–Ω—ã' if settings.ENABLE_NOTIFICATIONS else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}

‚úÖ –ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
"""
        
        await callback.bot.send_message(
            callback.from_user.id,
            test_message,
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}", show_alert=True)


@router.callback_query(F.data == "admin_mon_statistics")
@admin_required
async def monitoring_statistics_callback(callback: CallbackQuery):
    try:
        async for db in get_db():
            from app.database.crud.subscription import get_subscriptions_statistics
            sub_stats = await get_subscriptions_statistics(db)
            
            mon_status = await monitoring_service.get_monitoring_status(db)
            
            week_ago = datetime.now() - timedelta(days=7)
            week_logs = await monitoring_service.get_monitoring_logs(db, limit=1000)
            week_logs = [log for log in week_logs if log['created_at'] >= week_ago]
            
            week_success = sum(1 for log in week_logs if log['is_success'])
            week_errors = len(week_logs) - week_success
            
            text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

üì± <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {sub_stats['total_subscriptions']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {sub_stats['active_subscriptions']}
‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã—Ö: {sub_stats['trial_subscriptions']}
‚Ä¢ –ü–ª–∞—Ç–Ω—ã—Ö: {sub_stats['paid_subscriptions']}

üìà <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {mon_status['stats_24h']['successful']}
‚Ä¢ –û—à–∏–±–æ–∫: {mon_status['stats_24h']['failed']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {mon_status['stats_24h']['success_rate']}%

üìä <b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(week_logs)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {week_success}
‚Ä¢ –û—à–∏–±–æ–∫: {week_errors}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {round(week_success/len(week_logs)*100, 1) if week_logs else 0}%

üîß <b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {settings.MONITORING_INTERVAL} –º–∏–Ω
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'üü¢ –í–∫–ª' if getattr(settings, 'ENABLE_NOTIFICATIONS', True) else 'üî¥ –í—ã–∫–ª'}
‚Ä¢ –ê–≤—Ç–æ–æ–ø–ª–∞—Ç–∞: {', '.join(map(str, settings.get_autopay_warning_days()))} –¥–Ω–µ–π
"""
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
            ])
            
            await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", show_alert=True)


def get_monitoring_logs_keyboard(current_page: int, total_pages: int):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = []
    
    if total_pages > 1:
        nav_row = []
        
        if current_page > 1:
            nav_row.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è", 
                callback_data=f"admin_mon_logs_page_{current_page - 1}"
            ))
        
        nav_row.append(InlineKeyboardButton(
            text=f"{current_page}/{total_pages}", 
            callback_data="current_page"
        ))
        
        if current_page < total_pages:
            nav_row.append(InlineKeyboardButton(
                text="‚û°Ô∏è", 
                callback_data=f"admin_mon_logs_page_{current_page + 1}"
            ))
        
        keyboard.append(nav_row)
    
    keyboard.extend([
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_mon_logs"),
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data="admin_mon_clear_logs")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_monitoring_logs_back_keyboard():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_mon_logs"),
            InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="admin_mon_logs_filters")
        ],
        [
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="admin_mon_clear_logs")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_monitoring")]
    ])


@router.message(Command("monitoring"))
@admin_required
async def monitoring_command(message: Message):
    try:
        async for db in get_db():
            status = await monitoring_service.get_monitoring_status(db)
            
            running_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if status['is_running'] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            text = f"""
üîç <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {running_status}
üìà <b>–°–æ–±—ã—Ç–∏—è –∑–∞ 24—á:</b> {status['stats_24h']['total_events']}
‚úÖ <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {status['stats_24h']['success_rate']}%

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
"""
            
            await message.answer(text, parse_mode="HTML")
            break
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /monitoring: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def register_handlers(dp):
    dp.include_router(router)