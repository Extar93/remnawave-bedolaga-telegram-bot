import logging
import math
import time
from typing import Iterable, List, Optional, Tuple

from aiogram import Dispatcher, F, types
from aiogram.filters import BaseFilter, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import User
from app.localization.texts import get_texts
from app.services.remnawave_service import RemnaWaveService
from app.services.payment_service import PaymentService
from app.services.tribute_service import TributeService
from app.services.system_settings_service import bot_configuration_service
from app.states import BotConfigStates
from app.utils.decorators import admin_required, error_handler
from app.config import settings
from app.utils.currency_converter import currency_converter


logger = logging.getLogger(__name__)


CATEGORY_PAGE_SIZE = 10
SETTINGS_PAGE_SIZE = 8


CATEGORY_GROUP_DEFINITIONS: Tuple[Tuple[str, str, Tuple[str, ...]], ...] = (
    (
        "telegram_bot",
        "ü§ñ Telegram –±–æ—Ç",
        ("SUPPORT", "ADMIN_NOTIFICATIONS", "ADMIN_REPORTS", "CHANNEL"),
    ),
    (
        "database",
        "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
        ("DATABASE", "POSTGRES", "SQLITE", "REDIS"),
    ),
    (
        "remnawave",
        "üåä Remnawave API",
        ("REMNAWAVE",),
    ),
    (
        "subscriptions",
        "ü™ô –ü–æ–¥–ø–∏—Å–∫–∏ –∏ —Ç–∞—Ä–∏—Ñ—ã",
        (
            "TRIAL",
            "PAID_SUBSCRIPTION",
            "SUBSCRIPTIONS_GLOBAL",
            "TRAFFIC",
            "PERIODS",
            "SUBSCRIPTION_PRICES",
            "TRAFFIC_PACKAGES",
            "DISCOUNTS",
            "REFERRAL",
            "AUTOPAY",
        ),
    ),
    (
        "payments",
        "üí≥ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        ("TELEGRAM", "TRIBUTE", "YOOKASSA", "CRYPTOBOT", "MULENPAY", "PAL24", "PAYMENT"),
    ),
    (
        "interface",
        "üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ UX",
        ("INTERFACE_BRANDING", "INTERFACE_SUBSCRIPTION", "CONNECT_BUTTON", "HAPP", "SKIP"),
    ),
    (
        "monitoring",
        "üì£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        ("MONITORING", "NOTIFICATIONS"),
    ),
    (
        "operations",
        "üõ†Ô∏è –°—Ç–∞—Ç—É—Å—ã –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        ("SERVER", "MAINTENANCE"),
    ),
    (
        "localization",
        "üàØ –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è",
        ("LOCALIZATION",),
    ),
    (
        "extras",
        "üß© –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        ("ADDITIONAL",),
    ),
    (
        "reliability",
        "üíæ –ë–µ–∫–∞–ø—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        ("BACKUP", "VERSION"),
    ),
    (
        "technical",
        "üß∞ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ",
        ("LOG", "WEBHOOK", "DEBUG"),
    ),
)

CATEGORY_FALLBACK_KEY = "other"
CATEGORY_FALLBACK_TITLE = "üì¶ –ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"


async def _store_setting_context(
    state: FSMContext,
    *,
    key: str,
    group_key: str,
    category_page: int,
    settings_page: int,
) -> None:
    await state.update_data(
        setting_key=key,
        setting_group_key=group_key,
        setting_category_page=category_page,
        setting_settings_page=settings_page,
        botcfg_origin="bot_config",
        botcfg_timestamp=time.time(),
    )


class BotConfigInputFilter(BaseFilter):
    def __init__(self, timeout: float = 300.0) -> None:
        self.timeout = timeout

    async def __call__(
        self,
        message: types.Message,
        state: FSMContext,
    ) -> bool:
        if not message.text or message.text.startswith("/"):
            return False

        if message.chat.type != "private":
            return False

        data = await state.get_data()

        if data.get("botcfg_origin") != "bot_config":
            return False

        if not data.get("setting_key"):
            return False

        timestamp = data.get("botcfg_timestamp")
        if timestamp is None:
            return True

        try:
            return (time.time() - float(timestamp)) <= self.timeout
        except (TypeError, ValueError):
            return False


def _chunk(buttons: Iterable[types.InlineKeyboardButton], size: int) -> Iterable[List[types.InlineKeyboardButton]]:
    buttons_list = list(buttons)
    for index in range(0, len(buttons_list), size):
        yield buttons_list[index : index + size]


def _parse_category_payload(payload: str) -> Tuple[str, str, int, int]:
    parts = payload.split(":")
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    category_key = parts[2] if len(parts) > 2 else ""

    def _safe_int(value: str, default: int = 1) -> int:
        try:
            return max(1, int(value))
        except (TypeError, ValueError):
            return default

    category_page = _safe_int(parts[3]) if len(parts) > 3 else 1
    settings_page = _safe_int(parts[4]) if len(parts) > 4 else 1
    return group_key, category_key, category_page, settings_page


def _parse_group_payload(payload: str) -> Tuple[str, int]:
    parts = payload.split(":")
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        page = max(1, int(parts[2]))
    except (IndexError, ValueError):
        page = 1
    return group_key, page


def _get_grouped_categories() -> List[Tuple[str, str, List[Tuple[str, str, int]]]]:
    categories = bot_configuration_service.get_categories()
    categories_map = {key: (label, count) for key, label, count in categories}
    used: set[str] = set()
    grouped: List[Tuple[str, str, List[Tuple[str, str, int]]]] = []

    for group_key, title, category_keys in CATEGORY_GROUP_DEFINITIONS:
        items: List[Tuple[str, str, int]] = []
        for category_key in category_keys:
            if category_key in categories_map:
                label, count = categories_map[category_key]
                items.append((category_key, label, count))
                used.add(category_key)
        if items:
            grouped.append((group_key, title, items))

    remaining = [
        (key, label, count)
        for key, (label, count) in categories_map.items()
        if key not in used
    ]

    if remaining:
        remaining.sort(key=lambda item: item[1])
        grouped.append((CATEGORY_FALLBACK_KEY, CATEGORY_FALLBACK_TITLE, remaining))

    return grouped


def _build_groups_keyboard() -> types.InlineKeyboardMarkup:
    grouped = _get_grouped_categories()
    rows: list[list[types.InlineKeyboardButton]] = []

    for group_key, title, items in grouped:
        total = sum(count for _, _, count in items)
        rows.append(
            [
                types.InlineKeyboardButton(
                    text=f"{title} ({total})",
                    callback_data=f"botcfg_group:{group_key}:1",
                )
            ]
        )

    rows.append(
        [
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="admin_submenu_settings",
            )
        ]
    )

    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _build_categories_keyboard(
    group_key: str,
    group_title: str,
    categories: List[Tuple[str, str, int]],
    page: int = 1,
) -> types.InlineKeyboardMarkup:
    total_pages = max(1, math.ceil(len(categories) / CATEGORY_PAGE_SIZE))
    page = max(1, min(page, total_pages))

    start = (page - 1) * CATEGORY_PAGE_SIZE
    end = start + CATEGORY_PAGE_SIZE
    sliced = categories[start:end]

    rows: list[list[types.InlineKeyboardButton]] = []
    rows.append(
        [
            types.InlineKeyboardButton(
                text=f"‚Äî {group_title} ‚Äî",
                callback_data="botcfg_group:noop",
            )
        ]
    )

    buttons: List[types.InlineKeyboardButton] = []
    for category_key, label, count in sliced:
        button_text = f"{label} ({count})"
        buttons.append(
            types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"botcfg_cat:{group_key}:{category_key}:{page}:1",
            )
        )

    for chunk in _chunk(buttons, 2):
        rows.append(list(chunk))

    if total_pages > 1:
        nav_row: list[types.InlineKeyboardButton] = []
        if page > 1:
            nav_row.append(
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"botcfg_group:{group_key}:{page - 1}",
                )
            )
        nav_row.append(
            types.InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="botcfg_group:noop",
            )
        )
        if page < total_pages:
            nav_row.append(
                types.InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"botcfg_group:{group_key}:{page + 1}",
                )
            )
        rows.append(nav_row)

    rows.append(
        [
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ö —Ä–∞–∑–¥–µ–ª–∞–º",
                callback_data="admin_bot_config",
            )
        ]
    )

    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _build_settings_keyboard(
    category_key: str,
    group_key: str,
    category_page: int,
    language: str,
    page: int = 1,
) -> types.InlineKeyboardMarkup:
    definitions = bot_configuration_service.get_settings_for_category(category_key)
    total_pages = max(1, math.ceil(len(definitions) / SETTINGS_PAGE_SIZE))
    page = max(1, min(page, total_pages))

    start = (page - 1) * SETTINGS_PAGE_SIZE
    end = start + SETTINGS_PAGE_SIZE
    sliced = definitions[start:end]

    rows: list[list[types.InlineKeyboardButton]] = []

    if category_key == "REMNAWAVE":
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="üîå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                    callback_data=(
                        f"botcfg_test_remnawave:{group_key}:{category_key}:{category_page}:{page}"
                    ),
                )
            ]
        )
    elif category_key == "YOOKASSA":
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="üß™ –¢–µ—Å—Ç YooKassa ¬∑ 10 ‚ÇΩ",
                    callback_data=(
                        f"botcfg_test_payment:yookassa:{group_key}:{category_key}:{category_page}:{page}"
                    ),
                )
            ]
        )
    elif category_key == "TRIBUTE":
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="üß™ –¢–µ—Å—Ç Tribute",
                    callback_data=(
                        f"botcfg_test_payment:tribute:{group_key}:{category_key}:{category_page}:{page}"
                    ),
                )
            ]
        )
    elif category_key == "MULENPAY":
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="üß™ –¢–µ—Å—Ç MulenPay ¬∑ 1 ‚ÇΩ",
                    callback_data=(
                        f"botcfg_test_payment:mulenpay:{group_key}:{category_key}:{category_page}:{page}"
                    ),
                )
            ]
        )
    elif category_key == "PAL24":
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="üß™ –¢–µ—Å—Ç Pal24 ¬∑ 10 ‚ÇΩ",
                    callback_data=(
                        f"botcfg_test_payment:pal24:{group_key}:{category_key}:{category_page}:{page}"
                    ),
                )
            ]
        )
    elif category_key == "TELEGRAM":
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="üß™ –¢–µ—Å—Ç Stars ¬∑ 1 ‚≠ê",
                    callback_data=(
                        f"botcfg_test_payment:telegram_stars:{group_key}:{category_key}:{category_page}:{page}"
                    ),
                )
            ]
        )
    elif category_key == "CRYPTOBOT":
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="üß™ –¢–µ—Å—Ç CryptoBot ¬∑ 100 ‚ÇΩ",
                    callback_data=(
                        f"botcfg_test_payment:cryptobot:{group_key}:{category_key}:{category_page}:{page}"
                    ),
                )
            ]
        )

    for definition in sliced:
        value_preview = bot_configuration_service.format_value_for_list(definition.key)
        button_text = f"{definition.display_name} ¬∑ {value_preview}"
        if len(button_text) > 64:
            button_text = button_text[:63] + "‚Ä¶"
        callback_token = bot_configuration_service.get_callback_token(definition.key)
        rows.append(
            [
                types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=(
                        f"botcfg_setting:{group_key}:{category_page}:{page}:{callback_token}"
                    ),
                )
            ]
        )

    if total_pages > 1:
        nav_row: list[types.InlineKeyboardButton] = []
        if page > 1:
            nav_row.append(
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=(
                        f"botcfg_cat:{group_key}:{category_key}:{category_page}:{page - 1}"
                    ),
                )
            )
        nav_row.append(
            types.InlineKeyboardButton(
                text=f"{page}/{total_pages}", callback_data="botcfg_cat_page:noop"
            )
        )
        if page < total_pages:
            nav_row.append(
                types.InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=(
                        f"botcfg_cat:{group_key}:{category_key}:{category_page}:{page + 1}"
                    ),
                )
            )
        rows.append(nav_row)

    rows.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data=f"botcfg_group:{group_key}:{category_page}",
        )
    ])

    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _build_setting_keyboard(
    key: str,
    group_key: str,
    category_page: int,
    settings_page: int,
) -> types.InlineKeyboardMarkup:
    definition = bot_configuration_service.get_definition(key)
    rows: list[list[types.InlineKeyboardButton]] = []
    callback_token = bot_configuration_service.get_callback_token(key)

    choice_options = bot_configuration_service.get_choice_options(key)
    if choice_options:
        current_value = bot_configuration_service.get_current_value(key)
        choice_buttons: list[types.InlineKeyboardButton] = []
        for option in choice_options:
            choice_token = bot_configuration_service.get_choice_token(key, option.value)
            if choice_token is None:
                continue
            button_text = option.label
            if current_value == option.value and not button_text.startswith("‚úÖ"):
                button_text = f"‚úÖ {button_text}"
            choice_buttons.append(
                types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=(
                        f"botcfg_choice:{group_key}:{category_page}:{settings_page}:{callback_token}:{choice_token}"
                    ),
                )
            )

        for chunk in _chunk(choice_buttons, 2):
            rows.append(list(chunk))

    if definition.python_type is bool:
        rows.append([
            types.InlineKeyboardButton(
                text="üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å",
                callback_data=(
                    f"botcfg_toggle:{group_key}:{category_page}:{settings_page}:{callback_token}"
                ),
            )
        ])

    rows.append([
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
            callback_data=(
                f"botcfg_edit:{group_key}:{category_page}:{settings_page}:{callback_token}"
            ),
        )
    ])

    if bot_configuration_service.has_override(key):
        rows.append([
            types.InlineKeyboardButton(
                text="‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å",
                callback_data=(
                    f"botcfg_reset:{group_key}:{category_page}:{settings_page}:{callback_token}"
                ),
            )
        ])

    rows.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=(
                f"botcfg_cat:{group_key}:{definition.category_key}:{category_page}:{settings_page}"
            ),
        )
    ])

    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _render_setting_text(key: str) -> str:
    summary = bot_configuration_service.get_setting_summary(key)

    lines = [
        "üß© <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞</b>",
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {summary['name']}",
        f"<b>–ö–ª—é—á:</b> <code>{summary['key']}</code>",
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {summary['category_label']}",
        f"<b>–¢–∏–ø:</b> {summary['type']}",
        f"<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {summary['current']}",
        f"<b>–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> {summary['original']}",
        f"<b>–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –ë–î:</b> {'‚úÖ –î–∞' if summary['has_override'] else '‚ùå –ù–µ—Ç'}",
    ]

    choices = bot_configuration_service.get_choice_options(key)
    if choices:
        current_raw = bot_configuration_service.get_current_value(key)
        lines.append("")
        lines.append("<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>")
        for option in choices:
            marker = "‚úÖ" if current_raw == option.value else "‚Ä¢"
            value_display = bot_configuration_service.format_value(option.value)
            description = option.description or ""
            if description:
                lines.append(
                    f"{marker} {option.label} ‚Äî <code>{value_display}</code>\n   {description}"
                )
            else:
                lines.append(f"{marker} {option.label} ‚Äî <code>{value_display}</code>")

    return "\n".join(lines)


@admin_required
@error_handler
async def show_bot_config_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    keyboard = _build_groups_keyboard()
    await callback.message.edit_text(
        "üß© <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
        reply_markup=keyboard,
    )
    await callback.answer()


@admin_required
@error_handler
async def show_bot_config_group(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    group_key, page = _parse_group_payload(callback.data)
    grouped = _get_grouped_categories()
    group_lookup = {key: (title, items) for key, title, items in grouped}

    if group_key not in group_lookup:
        await callback.answer("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    group_title, items = group_lookup[group_key]
    keyboard = _build_categories_keyboard(group_key, group_title, items, page)
    await callback.message.edit_text(
        f"üß© <b>{group_title}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
        reply_markup=keyboard,
    )
    await callback.answer()


@admin_required
@error_handler
async def show_bot_config_category(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    group_key, category_key, category_page, settings_page = _parse_category_payload(
        callback.data
    )
    definitions = bot_configuration_service.get_settings_for_category(category_key)

    if not definitions:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        return

    category_label = definitions[0].category_label
    keyboard = _build_settings_keyboard(
        category_key,
        group_key,
        category_page,
        db_user.language,
        settings_page,
    )
    await callback.message.edit_text(
        f"üß© <b>{category_label}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
    )
    await callback.answer()


@admin_required
@error_handler
async def test_remnawave_connection(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    parts = callback.data.split(":", 5)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    category_key = parts[2] if len(parts) > 2 else "REMNAWAVE"

    try:
        category_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        category_page = 1

    try:
        settings_page = max(1, int(parts[4])) if len(parts) > 4 else 1
    except ValueError:
        settings_page = 1

    service = RemnaWaveService()
    result = await service.test_api_connection()

    status = result.get("status")
    message: str

    if status == "connected":
        message = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"
    elif status == "not_configured":
        message = f"‚ö†Ô∏è {result.get('message', 'RemnaWave API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}"
    else:
        base_message = result.get("message", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        status_code = result.get("status_code")
        if status_code:
            message = f"‚ùå {base_message} (HTTP {status_code})"
        else:
            message = f"‚ùå {base_message}"

    definitions = bot_configuration_service.get_settings_for_category(category_key)
    if definitions:
        keyboard = _build_settings_keyboard(
            category_key,
            group_key,
            category_page,
            db_user.language,
            settings_page,
        )
        try:
            await callback.message.edit_reply_markup(reply_markup=keyboard)
        except Exception:
            # ignore inability to refresh markup, main result shown in alert
            pass

    await callback.answer(message, show_alert=True)


@admin_required
@error_handler
async def test_payment_system(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    parts = callback.data.split(":", 6)
    provider = parts[1] if len(parts) > 1 else ""
    group_key = parts[2] if len(parts) > 2 else CATEGORY_FALLBACK_KEY
    category_key = parts[3] if len(parts) > 3 else ""

    try:
        category_page = max(1, int(parts[4])) if len(parts) > 4 else 1
    except ValueError:
        category_page = 1

    try:
        settings_page = max(1, int(parts[5])) if len(parts) > 5 else 1
    except ValueError:
        settings_page = 1

    payment_service = PaymentService(callback.bot)

    def _refresh_keyboard() -> None:
        definitions = bot_configuration_service.get_settings_for_category(category_key)
        if not definitions:
            return
        keyboard = _build_settings_keyboard(
            category_key,
            group_key,
            category_page,
            db_user.language,
            settings_page,
        )
        try:
            callback.message.edit_reply_markup(reply_markup=keyboard)
        except Exception:
            pass

    def _url_button(text: str, url: str) -> types.InlineKeyboardMarkup:
        return types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text=text, url=url)]]
        )

    response_text: Optional[str] = None
    response_markup: Optional[types.InlineKeyboardMarkup] = None
    alert_message: Optional[str] = None

    if provider == "yookassa":
        if not settings.is_yookassa_enabled():
            alert_message = "YooKassa –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        else:
            amount_kopeks = 1_000
            description = settings.get_balance_payment_description(amount_kopeks)
            metadata = {
                "test_payment": True,
                "initiator": "admin_bot_config",
                "provider": "yookassa",
            }
            result = await payment_service.create_yookassa_payment(
                db,
                db_user.id,
                amount_kopeks,
                description,
                metadata=metadata,
            )
            if result:
                confirmation_url = result.get("confirmation_url")
                status = result.get("status", "unknown")
                payment_id = result.get("yookassa_payment_id", "‚Äî")
                response_text = (
                    "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ YooKassa</b>\n\n"
                    f"–°—É–º–º–∞: {settings.format_price(amount_kopeks)}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"ID: {payment_id}"
                )
                if confirmation_url:
                    response_markup = _url_button("üí≥ –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç–µ–∂", confirmation_url)
                    alert_message = "–°—Å—ã–ª–∫–∞ –Ω–∞ YooKassa –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
                else:
                    alert_message = "–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –±–µ–∑ —Å—Å—ã–ª–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            else:
                alert_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ YooKassa"
    elif provider == "tribute":
        if not settings.TRIBUTE_ENABLED:
            alert_message = "Tribute –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        else:
            tribute_service = TributeService(callback.bot)
            try:
                payment_url = await tribute_service.create_payment_link(
                    user_id=db_user.telegram_id,
                    amount_kopeks=0,
                    description="–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Tribute",
                )
            except Exception as error:
                logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ Tribute: %s", error)
                payment_url = None

            if payment_url:
                response_text = (
                    "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Tribute</b>\n\n"
                    "–ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
                    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–±—Ö—É–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
                )
                response_markup = _url_button("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", payment_url)
                alert_message = "–°—Å—ã–ª–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ Tribute –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
            else:
                alert_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É Tribute"
    elif provider == "mulenpay":
        if not settings.is_mulenpay_enabled():
            alert_message = "MulenPay –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        else:
            requested_amount = 100
            description = settings.get_balance_payment_description(requested_amount)
            result = await payment_service.create_mulenpay_payment(
                db=db,
                user_id=db_user.id,
                amount_kopeks=requested_amount,
                description=description,
                language=db_user.language,
            )
            if not result and requested_amount < settings.MULENPAY_MIN_AMOUNT_KOPEKS:
                fallback_amount = settings.MULENPAY_MIN_AMOUNT_KOPEKS
                fallback_description = settings.get_balance_payment_description(
                    fallback_amount
                )
                result = await payment_service.create_mulenpay_payment(
                    db=db,
                    user_id=db_user.id,
                    amount_kopeks=fallback_amount,
                    description=fallback_description,
                    language=db_user.language,
                )
                if result:
                    response_text = (
                        "‚ö†Ô∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ MulenPay</b>\n\n"
                        f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {settings.format_price(requested_amount)}\n"
                        f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ –Ω–∞ {settings.format_price(fallback_amount)}"
                    )
            if result:
                payment_url = result.get("payment_url")
                actual_amount = result.get("amount_kopeks", requested_amount)
                if not response_text:
                    response_text = (
                        "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ MulenPay</b>\n\n"
                        f"–°—É–º–º–∞: {settings.format_price(actual_amount)}"
                    )
                if payment_url:
                    response_markup = _url_button("üí≥ –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç–µ–∂", payment_url)
                alert_message = "–°—Å—ã–ª–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ MulenPay –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
            elif not alert_message:
                alert_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ MulenPay"
    elif provider == "pal24":
        if not settings.is_pal24_enabled():
            alert_message = "Pal24 –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        else:
            requested_amount = 1_000
            description = settings.get_balance_payment_description(requested_amount)
            result = await payment_service.create_pal24_payment(
                db=db,
                user_id=db_user.id,
                amount_kopeks=requested_amount,
                description=description,
                language=db_user.language,
            )
            if not result and requested_amount < settings.PAL24_MIN_AMOUNT_KOPEKS:
                fallback_amount = settings.PAL24_MIN_AMOUNT_KOPEKS
                fallback_description = settings.get_balance_payment_description(
                    fallback_amount
                )
                result = await payment_service.create_pal24_payment(
                    db=db,
                    user_id=db_user.id,
                    amount_kopeks=fallback_amount,
                    description=fallback_description,
                    language=db_user.language,
                )
                if result:
                    response_text = (
                        "‚ö†Ô∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ Pal24</b>\n\n"
                        f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {settings.format_price(requested_amount)}\n"
                        f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ –Ω–∞ {settings.format_price(fallback_amount)}"
                    )
            if result:
                link_url = (
                    result.get("link_url")
                    or result.get("link_page_url")
                )
                actual_amount = result.get("amount_kopeks", requested_amount)
                if not response_text:
                    response_text = (
                        "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ Pal24</b>\n\n"
                        f"–°—É–º–º–∞: {settings.format_price(actual_amount)}"
                    )
                if link_url:
                    response_markup = _url_button("üí≥ –û—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç–µ–∂", link_url)
                alert_message = "–°—Å—ã–ª–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ Pal24 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
            elif not alert_message:
                alert_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ Pal24"
    elif provider == "telegram_stars":
        if not payment_service.stars_service:
            alert_message = "–°–µ—Ä–≤–∏—Å Telegram Stars –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        else:
            rubles_for_star = settings.stars_to_rubles(1)
            amount_kopeks = max(1, int(round(rubles_for_star * 100)))
            payload = f"admin_test_stars_{db_user.id}_{int(time.time())}"
            description = "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars"
            try:
                invoice_link = await payment_service.create_stars_invoice(
                    amount_kopeks=amount_kopeks,
                    description=description,
                    payload=payload,
                )
            except Exception as error:
                logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stars invoice: %s", error)
                invoice_link = None

            if invoice_link:
                stars_amount = settings.rubles_to_stars(amount_kopeks / 100)
                response_text = (
                    "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ Telegram Stars</b>\n\n"
                    f"–°—É–º–º–∞: ‚âà{stars_amount} ‚≠ê ({settings.format_price(amount_kopeks)})"
                )
                response_markup = _url_button("‚≠ê –û—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç", invoice_link)
                alert_message = "–°—Å—ã–ª–∫–∞ –Ω–∞ Stars invoice –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
            else:
                alert_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Stars invoice"
    elif provider == "cryptobot":
        if not payment_service.cryptobot_service:
            alert_message = "CryptoBot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        else:
            rub_amount = 100.0
            try:
                amount_usd = await currency_converter.rub_to_usd(rub_amount)
            except Exception as error:
                logger.error("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ RUB –≤ USD: %s", error)
                amount_usd = rub_amount / 100  # –∑–∞–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ~1 USD
            amount_usd = round(amount_usd, 2)
            payload = f"admin_test_cryptobot_{db_user.id}_{int(time.time())}"
            description = "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CryptoBot"
            result = await payment_service.create_cryptobot_payment(
                db=db,
                user_id=db_user.id,
                amount_usd=amount_usd,
                description=description,
                payload=payload,
            )
            if result:
                invoice_url = (
                    result.get("web_app_invoice_url")
                    or result.get("bot_invoice_url")
                    or result.get("mini_app_invoice_url")
                )
                response_text = (
                    "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ CryptoBot</b>\n\n"
                    f"–°—É–º–º–∞: 100 ‚ÇΩ (‚âà{amount_usd} USD)"
                )
                if invoice_url:
                    response_markup = _url_button("üí≥ –û—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç", invoice_url)
                alert_message = "–°—Å—ã–ª–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ CryptoBot –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
            else:
                alert_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç CryptoBot"
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä", show_alert=True)
        return

    if response_text:
        await callback.message.answer(
            response_text,
            reply_markup=response_markup,
            parse_mode="HTML",
        )
    elif response_markup:
        await callback.message.answer(
            "üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂",
            reply_markup=response_markup,
        )

    _refresh_keyboard()

    if alert_message:
        await callback.answer(alert_message, show_alert=True)
    else:
        await callback.answer("–ì–æ—Ç–æ–≤–æ")


@admin_required
@error_handler
async def show_bot_config_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 4)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer()


@admin_required
@error_handler
async def start_edit_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 4)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    definition = bot_configuration_service.get_definition(key)

    summary = bot_configuration_service.get_setting_summary(key)
    texts = get_texts(db_user.language)

    instructions = [
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>",
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {summary['name']}",
        f"–ö–ª—é—á: <code>{summary['key']}</code>",
        f"–¢–∏–ø: {summary['type']}",
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {summary['current']}",
        "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
    ]

    if definition.is_optional:
        instructions.append("–û—Ç–ø—Ä–∞–≤—å—Ç–µ 'none' –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

    instructions.append("–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'cancel'.")

    await callback.message.edit_text(
        "\n".join(instructions),
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=texts.BACK,
                        callback_data=(
                            f"botcfg_setting:{group_key}:{category_page}:{settings_page}:{token}"
                        ),
                    )
                ]
            ]
        ),
    )

    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await state.set_state(BotConfigStates.waiting_for_value)
    await callback.answer()


@admin_required
@error_handler
async def handle_edit_setting(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    data = await state.get_data()
    key = data.get("setting_key")
    group_key = data.get("setting_group_key", CATEGORY_FALLBACK_KEY)
    category_page = data.get("setting_category_page", 1)
    settings_page = data.get("setting_settings_page", 1)

    if not key:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    try:
        value = bot_configuration_service.parse_user_value(key, message.text or "")
    except ValueError as error:
        await message.answer(f"‚ö†Ô∏è {error}")
        return

    await bot_configuration_service.set_value(db, key, value)
    await db.commit()

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    await message.answer(text, reply_markup=keyboard)
    await state.clear()
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )


@admin_required
@error_handler
async def handle_direct_setting_input(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    data = await state.get_data()

    key = data.get("setting_key")
    group_key = data.get("setting_group_key", CATEGORY_FALLBACK_KEY)
    category_page = int(data.get("setting_category_page", 1) or 1)
    settings_page = int(data.get("setting_settings_page", 1) or 1)

    if not key:
        return

    try:
        value = bot_configuration_service.parse_user_value(key, message.text or "")
    except ValueError as error:
        await message.answer(f"‚ö†Ô∏è {error}")
        return

    await bot_configuration_service.set_value(db, key, value)
    await db.commit()

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    await message.answer(text, reply_markup=keyboard)

    await state.clear()
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )


@admin_required
@error_handler
async def reset_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 4)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    await bot_configuration_service.reset_value(db, key)
    await db.commit()

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer("–°–±—Ä–æ—à–µ–Ω–æ –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")


@admin_required
@error_handler
async def toggle_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 4)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    current = bot_configuration_service.get_current_value(key)
    new_value = not bool(current)
    await bot_configuration_service.set_value(db, key, new_value)
    await db.commit()

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")


@admin_required
@error_handler
async def apply_setting_choice(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 5)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    choice_token = parts[5] if len(parts) > 5 else ""

    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    try:
        value = bot_configuration_service.resolve_choice_token(key, choice_token)
    except KeyError:
        await callback.answer("–≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return

    await bot_configuration_service.set_value(db, key, value)
    await db.commit()

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")


def register_handlers(dp: Dispatcher) -> None:
    dp.callback_query.register(
        show_bot_config_menu,
        F.data == "admin_bot_config",
    )
    dp.callback_query.register(
        show_bot_config_group,
        F.data.startswith("botcfg_group:") & (~F.data.endswith(":noop")),
    )
    dp.callback_query.register(
        show_bot_config_category,
        F.data.startswith("botcfg_cat:"),
    )
    dp.callback_query.register(
        test_remnawave_connection,
        F.data.startswith("botcfg_test_remnawave:"),
    )
    dp.callback_query.register(
        test_payment_system,
        F.data.startswith("botcfg_test_payment:"),
    )
    dp.callback_query.register(
        show_bot_config_setting,
        F.data.startswith("botcfg_setting:"),
    )
    dp.callback_query.register(
        start_edit_setting,
        F.data.startswith("botcfg_edit:"),
    )
    dp.callback_query.register(
        reset_setting,
        F.data.startswith("botcfg_reset:"),
    )
    dp.callback_query.register(
        toggle_setting,
        F.data.startswith("botcfg_toggle:"),
    )
    dp.callback_query.register(
        apply_setting_choice,
        F.data.startswith("botcfg_choice:"),
    )
    dp.message.register(
        handle_direct_setting_input,
        StateFilter(None),
        F.text,
        BotConfigInputFilter(),
    )
    dp.message.register(
        handle_edit_setting,
        BotConfigStates.waiting_for_value,
    )

