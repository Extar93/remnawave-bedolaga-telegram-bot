import math
import html
import io
import time
from collections import deque
from dataclasses import dataclass, replace
from datetime import datetime
from enum import Enum
from typing import Any, Dict, Iterable, List, Optional, Tuple

from aiogram import Dispatcher, F, types
from aiogram.types import BufferedInputFile
from aiogram.filters import BaseFilter, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import User
from app.localization.texts import get_texts
from app.config import settings
from app.services.remnawave_service import RemnaWaveService
from app.services.payment_service import PaymentService
from app.services.tribute_service import TributeService
from app.services.system_settings_service import (
    SettingDefinition,
    bot_configuration_service,
)
from app.states import BotConfigStates
from app.utils.decorators import admin_required, error_handler
from app.utils.currency_converter import currency_converter
from app.external.telegram_stars import TelegramStarsService


CATEGORY_PAGE_SIZE = 10
SETTINGS_PAGE_SIZE = 8


@dataclass(slots=True)
class MenuCategoryDefinition:
    key: str
    title: str
    description: str
    category_keys: Tuple[str, ...]

    @property
    def icon(self) -> str:
        return self.title.split(" ", 1)[0]

    @property
    def plain_title(self) -> str:
        return self.title.split(" ", 1)[1] if " " in self.title else self.title


class SettingKind(Enum):
    TOGGLE = "toggle"
    TEXT = "text"
    NUMBER = "number"
    FLOAT = "float"
    PRICE = "price"
    LIST = "list"
    CHOICE = "choice"
    TIME = "time"
    URL = "url"
    SECRET = "secret"


@dataclass(slots=True)
class SettingMetadata:
    description: str = ""
    format_hint: str = ""
    example: str = ""
    warning: str = ""
    dependencies: str = ""
    recommended: Optional[str] = None
    sensitive: bool = False
    unit: Optional[str] = None
    doc_link: Optional[str] = None
    highlight: Optional[str] = None


MENU_CATEGORIES: Tuple[MenuCategoryDefinition, ...] = (
    MenuCategoryDefinition(
        key="core",
        title="ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ",
        description="–ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏",
        category_keys=("CHANNEL", "SKIP", "CONNECT_BUTTON"),
    ),
    MenuCategoryDefinition(
        key="support",
        title="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        description="–¢–∏–∫–µ—Ç—ã, –∫–æ–Ω—Ç–∞–∫—Ç –∏ SLA",
        category_keys=("SUPPORT",),
    ),
    MenuCategoryDefinition(
        key="payments",
        title="üí≥ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        description="YooKassa, CryptoBot, MulenPay –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã",
        category_keys=(
            "PAYMENT",
            "YOOKASSA",
            "CRYPTOBOT",
            "MULENPAY",
            "PAL24",
            "TRIBUTE",
            "TELEGRAM",
        ),
    ),
    MenuCategoryDefinition(
        key="subscriptions",
        title="üìÖ –ü–æ–¥–ø–∏—Å–∫–∏ –∏ —Ü–µ–Ω—ã",
        description="–¢–∞—Ä–∏—Ñ—ã, –ø–µ—Ä–∏–æ–¥—ã, —Ç—Ä–∞—Ñ–∏–∫ –∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è",
        category_keys=(
            "PAID_SUBSCRIPTION",
            "PERIODS",
            "SUBSCRIPTION_PRICES",
            "TRAFFIC",
            "TRAFFIC_PACKAGES",
            "DISCOUNTS",
            "AUTOPAY",
        ),
    ),
    MenuCategoryDefinition(
        key="trial",
        title="üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
        description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞",
        category_keys=("TRIAL",),
    ),
    MenuCategoryDefinition(
        key="referral",
        title="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        description="–ë–æ–Ω—É—Å—ã, –∫–æ–º–∏—Å—Å–∏–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        category_keys=("REFERRAL",),
    ),
    MenuCategoryDefinition(
        key="notifications",
        title="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        description="–ê–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç—á–µ—Ç—ã –∏ SLA",
        category_keys=("ADMIN_NOTIFICATIONS", "ADMIN_REPORTS", "NOTIFICATIONS"),
    ),
    MenuCategoryDefinition(
        key="interface",
        title="üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –±—Ä–µ–Ω–¥–∏–Ω–≥",
        description="–õ–æ–≥–æ—Ç–∏–ø, —Ç–µ–∫—Å—Ç—ã, —è–∑—ã–∫–∏ –∏ miniapp",
        category_keys=(
            "INTERFACE_BRANDING",
            "INTERFACE_SUBSCRIPTION",
            "HAPP",
            "MINIAPP",
            "LOCALIZATION",
        ),
    ),
    MenuCategoryDefinition(
        key="database",
        title="üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
        description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL –∏ SQLite",
        category_keys=("DATABASE", "POSTGRES", "SQLITE"),
    ),
    MenuCategoryDefinition(
        key="remnawave",
        title="üåê RemnaWave API",
        description="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–∞–Ω–µ–ª—å—é VPN",
        category_keys=("REMNAWAVE",),
    ),
    MenuCategoryDefinition(
        key="server_status",
        title="üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤",
        description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –º–µ—Ç—Ä–∏–∫–∏ –∏ XRay",
        category_keys=("SERVER", "MONITORING"),
    ),
    MenuCategoryDefinition(
        key="maintenance",
        title="üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
        description="–†–µ–∂–∏–º –¢–û, –±—ç–∫–∞–ø—ã –∏ –≤–µ—Ä—Å–∏–∏",
        category_keys=("MAINTENANCE", "BACKUP", "VERSION"),
    ),
    MenuCategoryDefinition(
        key="advanced",
        title="‚ö° –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ",
        description="Web API, –≥–ª—É–±–æ–∫–∏–µ —Å—Å—ã–ª–∫–∏ –∏ Redis",
        category_keys=("WEB_API", "WEBHOOK", "LOG", "DEBUG", "ADDITIONAL", "REDIS"),
    ),
)


CATEGORY_FALLBACK_KEY = "other"
CATEGORY_FALLBACK_TITLE = "üì¶ –ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"


ASSIGNED_CATEGORY_KEYS: set[str] = {
    key
    for menu_category in MENU_CATEGORIES
    for key in menu_category.category_keys
}


SENSITIVE_KEYWORDS = (
    "TOKEN",
    "SECRET",
    "PASSWORD",
    "API_KEY",
    "SECRET_KEY",
    "WEBHOOK_SECRET",
    "SIGNATURE",
    "PRIVATE",
)

LIST_KEYWORDS = (
    "LIST",
    "IDS",
    "PERIODS",
    "ASSETS",
    "LANGUAGES",
    "PACKAGES",
    "WARNING_DAYS",
    "UUIDS",
)

URL_KEYWORDS = (
    "URL",
    "LINK",
    "WEBHOOK",
    "HOST",
    "ENDPOINT",
    "BASE_URL",
)

TIME_KEYWORDS = (
    "_TIME",
    "_HOUR",
    "_HOURS",
    "_MINUTE",
    "_MINUTES",
)


SETTING_METADATA_OVERRIDES: Dict[str, SettingMetadata] = {
    "MAINTENANCE_MODE": SettingMetadata(
        description="–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.",
        format_hint="–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: <code>–≤–∫–ª</code>/<code>–≤—ã–∫–ª</code>.",
        example="–≤—ã–∫–ª",
        warning="–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.",
        dependencies="MAINTENANCE_MESSAGE ‚Äî —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        recommended="false",
        highlight="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä",
    ),
    "MAINTENANCE_MESSAGE": SettingMetadata(
        description="–°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —É–≤–∏–¥—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç.",
        format_hint="–¢–µ–∫—Å—Ç –¥–æ 512 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown.",
        example="üîß –í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã...",
        warning="–ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥—è—Ç –≤—Å–µ.",
    ),
    "SUPPORT_USERNAME": SettingMetadata(
        description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        format_hint="Telegram username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username –∏–ª–∏ https://t.me/...",
        example="@bedolaga_support",
        dependencies="SUPPORT_SYSTEM_MODE ‚Äî —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.",
    ),
    "SUPPORT_TICKET_SLA_MINUTES": SettingMetadata(
        description="–°—Ä–æ–∫ (–≤ –º–∏–Ω—É—Ç–∞—Ö) –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Ç–∏–∫–µ—Ç.",
        format_hint="–¶–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1440.",
        example="15",
        unit="–º–∏–Ω—É—Ç",
        warning="–ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
    ),
    "TRIAL_DURATION_DAYS": SettingMetadata(
        description="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏.",
        format_hint="–¶–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.",
        example="3",
        unit="–¥–Ω–µ–π",
        recommended="3",
    ),
    "TRIAL_TRAFFIC_LIMIT_GB": SettingMetadata(
        description="–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –≥–∏–≥–∞–±–∞–π—Ç–∞—Ö –¥–ª—è —Ç—Ä–∏–∞–ª–∞.",
        format_hint="–¶–µ–ª–æ–µ —á–∏—Å–ª–æ",
        example="10",
        unit="–ì–ë",
    ),
    "TRIAL_DEVICE_LIMIT": SettingMetadata(
        description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ç—Ä–∏–∞–ª–µ.",
        format_hint="–¶–µ–ª–æ–µ —á–∏—Å–ª–æ",
        example="2",
        unit="—É—Å—Ç—Ä–æ–π—Å—Ç–≤",
    ),
    "YOOKASSA_ENABLED": SettingMetadata(
        description="–í–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ YooKassa.",
        format_hint="–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å",
        warning="–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Shop ID –∏ —Å–µ–∫—Ä–µ—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –∏–Ω–∞—á–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.",
        dependencies="YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY, YOOKASSA_RETURN_URL",
    ),
    "YOOKASSA_SHOP_ID": SettingMetadata(
        description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –≤ YooKassa.",
        format_hint="–°—Ç—Ä–æ–∫–∞, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ YooKassa.",
        example="123456",
        sensitive=True,
    ),
    "YOOKASSA_SECRET_KEY": SettingMetadata(
        description="–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ YooKassa.",
        format_hint="–°—Ç—Ä–æ–∫–∞ 32-64 —Å–∏–º–≤–æ–ª–∞.",
        example="sk_test_***",
        warning="–•—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –≤ —Å–µ–∫—Ä–µ—Ç–µ, –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å –∏–º —Å —Ç—Ä–µ—Ç—å–∏–º–∏ –ª–∏—Ü–∞–º–∏.",
        sensitive=True,
    ),
    "BASE_SUBSCRIPTION_PRICE": SettingMetadata(
        description="–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∫–æ–ø–µ–π–∫–∞—Ö.",
        format_hint="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä—É–±–ª—è—Ö ‚Äî –±–æ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ –∫–æ–ø–µ–π–∫–∏.",
        example="990 ‚ÇΩ",
        unit="‚ÇΩ",
    ),
    "AVAILABLE_SUBSCRIPTION_PERIODS": SettingMetadata(
        description="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö.",
        format_hint="–ß–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30,90,180).",
        example="14,30,90",
        dependencies="PRICE_XX_DAYS ‚Äî —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.",
    ),
    "REMNAWAVE_API_URL": SettingMetadata(
        description="–ë–∞–∑–æ–≤—ã–π URL RemnaWave API.",
        format_hint="–ü–æ–ª–Ω—ã–π URL, –Ω–∞–ø—Ä–∏–º–µ—Ä https://panel.example.com/api.",
        example="https://remnawave.example/api",
        dependencies="REMNAWAVE_API_KEY –∏–ª–∏ REMNAWAVE_USERNAME/REMNAWAVE_PASSWORD",
    ),
    "REMNAWAVE_API_KEY": SettingMetadata(
        description="API-–∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ RemnaWave.",
        format_hint="–°—Ç—Ä–æ–∫–∞, –≤—ã–¥–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å—é RemnaWave.",
        example="rw_************************",
        sensitive=True,
    ),
    "REMNAWAVE_SECRET_KEY": SettingMetadata(
        description="–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ RemnaWave.",
        sensitive=True,
        warning="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—à–∏–±–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
    ),
    "ENABLE_NOTIFICATIONS": SettingMetadata(
        description="–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
        format_hint="–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å",
        warning="–ü—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.",
        dependencies="NOTIFICATION_RETRY_ATTEMPTS, NOTIFICATION_CACHE_HOURS",
    ),
    "ADMIN_REPORTS_SEND_TIME": SettingMetadata(
        description="–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
        format_hint="–§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –±–æ—Ç–∞.",
        example="09:30",
        dependencies="ADMIN_REPORTS_ENABLED –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–æ.",
    ),
    "WEB_API_ENABLED": SettingMetadata(
        description="–í–∫–ª—é—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ Web API.",
        format_hint="–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å",
        warning="–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
        dependencies="WEB_API_DEFAULT_TOKEN, WEB_API_ALLOWED_ORIGINS",
    ),
    "WEB_API_DEFAULT_TOKEN": SettingMetadata(
        description="–ë—É—Ç—Å—Ç—Ä–∞–ø —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Web API.",
        format_hint="–°—Ç—Ä–æ–∫–∞ –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.",
        example="rw_api_***",
        sensitive=True,
        warning="–ü–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.",
    ),
    "PAYMENT_SERVICE_NAME": SettingMetadata(
        description="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≤ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö.",
        format_hint="–ö—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç 2-32 —Å–∏–º–≤–æ–ª–∞.",
        example="Bedolaga VPN",
    ),
    "TELEGRAM_STARS_ENABLED": SettingMetadata(
        description="–í–∫–ª—é—á–∞–µ—Ç –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Stars.",
        format_hint="–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å",
        warning="–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π Telegram.",
    ),
    "CRYPTOBOT_ENABLED": SettingMetadata(
        description="–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ CryptoBot.",
        warning="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ —Å–µ–∫—Ä–µ—Ç –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º.",
    ),
    "PAL24_ENABLED": SettingMetadata(
        description="–í–∫–ª—é—á–∞–µ—Ç PayPalych (PAL24).",
        warning="–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ–±—Ö—É–∫–∞.",
    ),
    "MULENPAY_ENABLED": SettingMetadata(
        description="–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç MulenPay.",
        warning="–ù–µ–æ–±—Ö–æ–¥–∏–º—ã API KEY –∏ SECRET KEY –∏–∑ –ø–∞–Ω–µ–ª–∏ MulenPay.",
    ),
    "TRIBUTE_ENABLED": SettingMetadata(
        description="–†–∞–∑—Ä–µ—à–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Tribute.",
        warning="–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º API –∫–ª—é—á–µ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –≤–µ–±—Ö—É–∫–µ.",
    ),
}


CATEGORY_SECTION_DESCRIPTIONS: Dict[str, str] = {
    "CHANNEL": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª.",
    "SKIP": "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –ø—Ä–æ–ø—É—Å–∫–∞ —à–∞–≥–æ–≤.",
    "CONNECT_BUTTON": "–î–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è¬ª –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏.",
    "SUPPORT": "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —Ç–∏–∫–µ—Ç—ã –∏ SLA.",
    "PAYMENT": "–û–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏–π –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π.",
    "YOOKASSA": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ YooKassa.",
    "CRYPTOBOT": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot.",
    "MULENPAY": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ MulenPay.",
    "PAL24": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è PayPalych (PAL24).",
    "TRIBUTE": "–°–±–æ—Ä –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ Tribute.",
    "TELEGRAM": "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars.",
    "PAID_SUBSCRIPTION": "–ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.",
    "PERIODS": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.",
    "SUBSCRIPTION_PRICES": "–¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º.",
    "TRAFFIC": "–õ–∏–º–∏—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–±—Ä–æ—Å–∞.",
    "TRAFFIC_PACKAGES": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å.",
    "DISCOUNTS": "–ü—Ä–æ–º–æ–≥—Ä—É–ø–ø—ã –∏ —Å–∫–∏–¥–∫–∏.",
    "AUTOPAY": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.",
    "TRIAL": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.",
    "REFERRAL": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
    "ADMIN_NOTIFICATIONS": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ —Å–æ–±—ã—Ç–∏—è—Ö.",
    "ADMIN_REPORTS": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
    "NOTIFICATIONS": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–µ—Ç—Ä–∞–∏.",
    "INTERFACE_BRANDING": "–õ–æ–≥–æ—Ç–∏–ø –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.",
    "INTERFACE_SUBSCRIPTION": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É.",
    "HAPP": "–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Happ –∏ CryptoLink.",
    "MINIAPP": "–î–∞–Ω–Ω—ã–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.",
    "LOCALIZATION": "–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –∏ —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
    "DATABASE": "–í—ã–±–æ—Ä –¥–≤–∏–∂–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
    "POSTGRES": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL.",
    "SQLITE": "–ü—É—Ç—å –∫ –±–∞–∑–µ SQLite.",
    "REMNAWAVE": "–î–æ—Å—Ç—É–ø –∫ RemnaWave API.",
    "SERVER": "–†–µ–∂–∏–º—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤.",
    "MONITORING": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤.",
    "MAINTENANCE": "–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
    "BACKUP": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã –∏ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∞.",
    "VERSION": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞.",
    "WEB_API": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ Web API.",
    "WEBHOOK": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞ –±–æ—Ç–∞.",
    "LOG": "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–æ–≤.",
    "DEBUG": "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏.",
    "ADDITIONAL": "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≥–ª—É–±–æ–∫–∏–µ —Å—Å—ã–ª–∫–∏.",
    "REDIS": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis.",
}


SETTINGS_HISTORY: deque[Dict[str, Any]] = deque(maxlen=10)

PREDEFINED_PRESETS: Dict[str, Dict[str, Any]] = {
    "recommended": {
        "MAINTENANCE_MODE": False,
        "ENABLE_NOTIFICATIONS": True,
        "SUPPORT_TICKET_SLA_MINUTES": 5,
        "TRIAL_DURATION_DAYS": 3,
        "WEB_API_ENABLED": False,
    },
    "minimal": {
        "ENABLE_NOTIFICATIONS": False,
        "SUPPORT_MENU_ENABLED": False,
        "TRIAL_DURATION_DAYS": 0,
        "TRIAL_TRAFFIC_LIMIT_GB": 5,
        "MAINTENANCE_MODE": False,
    },
    "security": {
        "ENABLE_NOTIFICATIONS": True,
        "RESET_TRAFFIC_ON_PAYMENT": True,
        "MAINTENANCE_AUTO_ENABLE": True,
        "WEB_API_ENABLED": False,
        "YOOKASSA_SBP_ENABLED": False,
    },
    "testing": {
        "DEBUG": True,
        "ENABLE_NOTIFICATIONS": False,
        "MAINTENANCE_MODE": True,
        "WEB_API_ENABLED": True,
    },
}

PRESET_TITLES: Dict[str, str] = {
    "recommended": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
    "minimal": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
    "security": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
    "testing": "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
}

CUSTOM_PRESETS: Dict[str, Dict[str, Any]] = {}


def _log_setting_change(key: str, old_value: Any, new_value: Any, source: str) -> None:
    SETTINGS_HISTORY.appendleft(
        {
            "timestamp": datetime.utcnow(),
            "key": key,
            "old": old_value,
            "new": new_value,
            "source": source,
        }
    )


async def _store_setting_context(
    state: FSMContext,
    *,
    key: str,
    group_key: str,
    category_page: int,
    settings_page: int,
) -> None:
    await state.update_data(
        setting_key=key,
        setting_group_key=group_key,
        setting_category_page=category_page,
        setting_settings_page=settings_page,
        botcfg_origin="bot_config",
        botcfg_timestamp=time.time(),
    )


class BotConfigInputFilter(BaseFilter):
    def __init__(self, timeout: float = 300.0) -> None:
        self.timeout = timeout

    async def __call__(
        self,
        message: types.Message,
        state: FSMContext,
    ) -> bool:
        if not message.text or message.text.startswith("/"):
            return False

        if message.chat.type != "private":
            return False

        data = await state.get_data()

        if data.get("botcfg_origin") != "bot_config":
            return False

        if not data.get("setting_key"):
            return False

        timestamp = data.get("botcfg_timestamp")
        if timestamp is None:
            return True

        try:
            return (time.time() - float(timestamp)) <= self.timeout
        except (TypeError, ValueError):
            return False


def _chunk(buttons: Iterable[types.InlineKeyboardButton], size: int) -> Iterable[List[types.InlineKeyboardButton]]:
    buttons_list = list(buttons)
    for index in range(0, len(buttons_list), size):
        yield buttons_list[index : index + size]


def _parse_category_payload(payload: str) -> Tuple[str, str, int, int]:
    parts = payload.split(":")
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    category_key = parts[2] if len(parts) > 2 else ""

    def _safe_int(value: str, default: int = 1) -> int:
        try:
            return max(1, int(value))
        except (TypeError, ValueError):
            return default

    category_page = _safe_int(parts[3]) if len(parts) > 3 else 1
    settings_page = _safe_int(parts[4]) if len(parts) > 4 else 1
    return group_key, category_key, category_page, settings_page


def _parse_group_payload(payload: str) -> Tuple[str, int]:
    parts = payload.split(":")
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        page = max(1, int(parts[2]))
    except (IndexError, ValueError):
        page = 1
    return group_key, page


def _get_grouped_categories() -> List[Tuple[str, str, List[Tuple[str, str, int]]]]:
    categories = bot_configuration_service.get_categories()
    categories_map = {key: (label, count) for key, label, count in categories}
    used: set[str] = set()
    grouped: List[Tuple[str, str, List[Tuple[str, str, int]]]] = []

    for menu_category in MENU_CATEGORIES:
        items: List[Tuple[str, str, int]] = []
        for category_key in menu_category.category_keys:
            if category_key in categories_map:
                label, count = categories_map[category_key]
                items.append((category_key, label, count))
                used.add(category_key)
        if items:
            grouped.append((menu_category.key, menu_category.title, items))

    remaining = [
        (key, label, count)
        for key, (label, count) in categories_map.items()
        if key not in used
    ]

    if remaining:
        remaining.sort(key=lambda item: item[1])
        grouped.append((CATEGORY_FALLBACK_KEY, CATEGORY_FALLBACK_TITLE, remaining))

    return grouped


def _resolve_menu_category(menu_key: str) -> Optional[MenuCategoryDefinition]:
    for menu_category in MENU_CATEGORIES:
        if menu_category.key == menu_key:
            return menu_category
    return None


def _collect_menu_sections(
    menu_key: str,
) -> List[Tuple[str, str, List[SettingDefinition]]]:
    sections: List[Tuple[str, str, List[SettingDefinition]]] = []

    if menu_key == CATEGORY_FALLBACK_KEY:
        for category_key, label, _ in bot_configuration_service.get_categories():
            if category_key in ASSIGNED_CATEGORY_KEYS:
                continue
            definitions = bot_configuration_service.get_settings_for_category(category_key)
            if definitions:
                sections.append((category_key, label, definitions))
        return sections

    menu_category = _resolve_menu_category(menu_key)
    if not menu_category:
        return sections

    for category_key in menu_category.category_keys:
        definitions = bot_configuration_service.get_settings_for_category(category_key)
        if definitions:
            sections.append((category_key, definitions[0].category_label, definitions))
    return sections


def _collect_menu_definitions(menu_key: str) -> List[SettingDefinition]:
    sections = _collect_menu_sections(menu_key)
    definitions: List[SettingDefinition] = []
    seen: set[str] = set()

    for _, _, items in sections:
        for definition in items:
            if definition.key in seen:
                continue
            definitions.append(definition)
            seen.add(definition.key)

    definitions.sort(key=lambda definition: definition.display_name.lower())
    return definitions


def _find_menu_key_for_category(category_key: str) -> str:
    for menu_category in MENU_CATEGORIES:
        if category_key in menu_category.category_keys:
            return menu_category.key
    return CATEGORY_FALLBACK_KEY


def _iter_all_definitions() -> Iterable[SettingDefinition]:
    seen: set[str] = set()
    for category_key, _, _ in bot_configuration_service.get_categories():
        for definition in bot_configuration_service.get_settings_for_category(category_key):
            if definition.key in seen:
                continue
            seen.add(definition.key)
            yield definition


def _determine_setting_kind(definition: SettingDefinition) -> SettingKind:
    key_upper = definition.key.upper()

    if bot_configuration_service.has_choices(definition.key):
        return SettingKind.CHOICE

    python_type = definition.python_type

    if python_type is bool:
        return SettingKind.TOGGLE

    if python_type is int:
        if key_upper.startswith("PRICE_") or key_upper.endswith("_KOPEKS"):
            return SettingKind.PRICE
        return SettingKind.NUMBER

    if python_type is float:
        return SettingKind.FLOAT

    if python_type is str:
        if any(keyword in key_upper for keyword in TIME_KEYWORDS):
            return SettingKind.TIME
        if any(keyword in key_upper for keyword in URL_KEYWORDS):
            return SettingKind.URL
        if any(keyword in key_upper for keyword in LIST_KEYWORDS):
            return SettingKind.LIST
        if any(keyword in key_upper for keyword in SENSITIVE_KEYWORDS):
            return SettingKind.SECRET
        return SettingKind.TEXT

    return SettingKind.TEXT


def _format_metadata_value(value: Any, kind: Optional[SettingKind]) -> str:
    if value is None:
        return ""
    if kind == SettingKind.PRICE:
        try:
            rubles = float(value) / 100
            return f"{rubles:.0f}"
        except Exception:
            return str(value)
    if kind == SettingKind.TOGGLE:
        return "–≤–∫–ª" if bool(value) else "–≤—ã–∫–ª"
    if isinstance(value, (list, tuple, set)):
        return ",".join(str(item) for item in value)
    return str(value)


def _mask_sensitive(value: Any) -> str:
    text = str(value)
    if not text:
        return "‚Äî"
    if len(text) <= 4:
        return "‚Ä¢" * len(text)
    return "‚Ä¢" * (len(text) - 4) + text[-4:]


def _format_price(kopeks: int) -> str:
    try:
        rubles = int(kopeks) / 100
        formatted = f"{rubles:,.0f}".replace(",", " ")
        return f"{formatted} ‚ÇΩ"
    except Exception:
        return str(kopeks)


def _to_list(value: Any) -> List[str]:
    if value is None:
        return []
    if isinstance(value, str):
        return [item.strip() for item in value.split(",") if item.strip()]
    if isinstance(value, (list, tuple, set)):
        return [str(item).strip() for item in value if str(item).strip()]
    return [str(value)]


def _format_setting_value(
    definition: SettingDefinition,
    value: Any,
    metadata: SettingMetadata,
    *,
    short: bool = False,
) -> str:
    if value is None or (isinstance(value, str) and not value.strip()):
        return "‚Äî"

    kind = _determine_setting_kind(definition)

    if metadata.sensitive or kind == SettingKind.SECRET:
        return _mask_sensitive(value)

    if kind == SettingKind.TOGGLE:
        return "–í–ö–õ–Æ–ß–ï–ù–û" if bool(value) else "–í–´–ö–õ–Æ–ß–ï–ù–û"

    if kind == SettingKind.PRICE:
        try:
            return _format_price(int(value))
        except Exception:
            return str(value)

    if kind == SettingKind.NUMBER:
        return f"{value} {metadata.unit}".strip() if metadata.unit else str(value)

    if kind == SettingKind.FLOAT:
        try:
            return f"{float(value):g}"
        except Exception:
            return str(value)

    if kind == SettingKind.TIME:
        return str(value)

    if kind == SettingKind.URL:
        text = str(value)
        return text if short else html.escape(text)

    if kind == SettingKind.LIST:
        items = _to_list(value)
        if short:
            preview = ", ".join(items[:3])
            if len(items) > 3:
                preview += " ‚Ä¶"
            return preview or "‚Äî"
        return "\n".join(f"‚Ä¢ {html.escape(item)}" for item in items) or "‚Äî"

    if kind == SettingKind.CHOICE:
        return html.escape(str(value))

    return html.escape(str(value)) if not short else str(value)


def _setting_status_icon(definition: SettingDefinition, value: Any) -> str:
    kind = _determine_setting_kind(definition)
    if kind == SettingKind.TOGGLE:
        return "‚úÖ" if bool(value) else "‚ùå"
    if value is None or (isinstance(value, str) and not value.strip()):
        return "‚ö†Ô∏è"
    if bot_configuration_service.has_override(definition.key):
        return "üõ†"
    return "üìå"


def _get_setting_metadata(
    key: str,
    definition: Optional[SettingDefinition] = None,
) -> SettingMetadata:
    override = SETTING_METADATA_OVERRIDES.get(key)
    if override:
        return replace(override)

    if definition is None:
        try:
            definition = bot_configuration_service.get_definition(key)
        except KeyError:
            definition = None

    kind: Optional[SettingKind] = None
    if definition is not None:
        kind = _determine_setting_kind(definition)

    description = ""
    format_hint = ""
    example = ""
    warning = ""
    dependencies = ""
    unit = None

    if kind == SettingKind.TOGGLE:
        description = "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."
        format_hint = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>–≤–∫–ª</code>/<code>–≤—ã–∫–ª</code> –∏–ª–∏ <code>on</code>/<code>off</code>."
    elif kind == SettingKind.PRICE:
        description = "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∫–æ–ø–µ–π–∫–∞—Ö."
        format_hint = "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä—É–±–ª—è—Ö, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –≤ –∫–æ–ø–µ–π–∫–∏."
        unit = "‚ÇΩ"
    elif kind == SettingKind.LIST:
        description = "–°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
        format_hint = "–†–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø—è—Ç—ã–º–∏, –ø—Ä–æ–±–µ–ª—ã –¥–æ–ø—É—Å—Ç–∏–º—ã."
    elif kind == SettingKind.TIME:
        description = "–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú."
        format_hint = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä 09:30."
    elif kind == SettingKind.URL:
        description = "URL –∏–ª–∏ —Å—Å—ã–ª–∫–∞."
        format_hint = "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http:// –∏–ª–∏ https://."
    elif kind == SettingKind.NUMBER:
        description = "–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
        format_hint = "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."
    elif kind == SettingKind.FLOAT:
        description = "–ß–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π."
        format_hint = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏."
    elif kind == SettingKind.TEXT:
        description = "–¢–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
        format_hint = "–õ—é–±–∞—è —Å—Ç—Ä–æ–∫–∞, –º–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞."
    elif kind == SettingKind.CHOICE:
        description = "–í—ã–±–æ—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        format_hint = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."

    original_value = None
    if definition is not None:
        original_value = bot_configuration_service.get_original_value(key)
        if not example:
            example = _format_metadata_value(original_value, kind)

    metadata = SettingMetadata(
        description=description or (f"–ü–∞—Ä–∞–º–µ—Ç—Ä <b>{key}</b>." if not definition else f"–ü–∞—Ä–∞–º–µ—Ç—Ä {definition.display_name}.") ,
        format_hint=format_hint,
        example=example,
        warning=warning,
        dependencies=dependencies,
        recommended=_format_metadata_value(original_value, kind) or None,
        sensitive=(kind == SettingKind.SECRET),
        unit=unit,
    )

    return metadata


def _summarize_definitions(definitions: List[SettingDefinition]) -> Dict[str, Any]:
    total = len(definitions)
    overrides = 0
    missing_required = 0
    disabled_flags = 0
    enabled_flags = 0
    issues: List[str] = []

    for definition in definitions:
        value = bot_configuration_service.get_current_value(definition.key)
        kind = _determine_setting_kind(definition)

        if bot_configuration_service.has_override(definition.key):
            overrides += 1

        if kind == SettingKind.TOGGLE:
            if bool(value):
                enabled_flags += 1
            else:
                disabled_flags += 1
                if definition.key.endswith("ENABLED") or "ENABLE" in definition.key:
                    issues.append(f"{definition.display_name}: –≤—ã–∫–ª—é—á–µ–Ω–æ")
        else:
            if not definition.is_optional:
                if value is None:
                    missing_required += 1
                    issues.append(f"{definition.display_name}: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
                elif isinstance(value, str) and not value.strip():
                    missing_required += 1
                    issues.append(f"{definition.display_name}: –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

    if missing_required:
        status_icon = "üî¥"
        status_text = f"{missing_required} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
    elif disabled_flags and not enabled_flags:
        status_icon = "üü°"
        status_text = "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã"
    elif disabled_flags:
        status_icon = "üü°"
        status_text = "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
    else:
        status_icon = "üü¢"
        status_text = "–í—Å—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"

    return {
        "total": total,
        "overrides": overrides,
        "enabled_flags": enabled_flags,
        "disabled_flags": disabled_flags,
        "missing_required": missing_required,
        "issues": issues,
        "status_icon": status_icon,
        "status_text": status_text,
    }


def _summarize_menu_category(menu_key: str) -> Dict[str, Any]:
    definitions = _collect_menu_definitions(menu_key)
    return _summarize_definitions(definitions)


def _build_groups_keyboard() -> types.InlineKeyboardMarkup:
    grouped = _get_grouped_categories()
    rows: list[list[types.InlineKeyboardButton]] = []
    buttons: list[types.InlineKeyboardButton] = []

    for group_key, title, items in grouped:
        summary = _summarize_menu_category(group_key)
        total = summary["total"] or sum(count for _, _, count in items)
        button_text = f"{summary['status_icon']} {title} ¬∑ {total}"
        buttons.append(
            types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"botcfg_group:{group_key}:1",
            )
        )

    for chunk in _chunk(buttons, 2):
        rows.append(list(chunk))

    rows.append(
        [
            types.InlineKeyboardButton(
                text="üîç –ù–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
                callback_data="botcfg_search",
            ),
            types.InlineKeyboardButton(
                text="üìä –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                callback_data="botcfg_history",
            ),
        ]
    )
    rows.append(
        [
            types.InlineKeyboardButton(
                text="üéõ –ü—Ä–µ—Å–µ—Ç—ã",
                callback_data="botcfg_presets",
            ),
            types.InlineKeyboardButton(
                text="üì§ –≠–∫—Å–ø–æ—Ä—Ç .env",
                callback_data="botcfg_export",
            ),
        ]
    )
    rows.append(
        [
            types.InlineKeyboardButton(
                text="üì• –ò–º–ø–æ—Ä—Ç .env",
                callback_data="botcfg_import",
            ),
            types.InlineKeyboardButton(
                text="‚ùì –ü–æ–º–æ—â—å",
                callback_data="botcfg_help",
            ),
        ]
    )
    rows.append(
        [
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="admin_submenu_settings",
            )
        ]
    )

    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _render_main_menu_text() -> str:
    grouped = _get_grouped_categories()
    total_settings = sum(sum(count for _, _, count in items) for _, _, items in grouped)
    lines = [
        "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</b>",
        "–ì–ª–∞–≤–Ω–∞—è ‚Üí –†–∞–∑–¥–µ–ª—ã",
        "",
        f"–í—Å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: <b>{total_settings}</b>",
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        "",
    ]

    for group_key, title, _ in grouped:
        summary = _summarize_menu_category(group_key)
        menu_category = _resolve_menu_category(group_key)
        description = menu_category.description if menu_category else "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
        overrides = summary["overrides"]
        lines.append(
            (
                f"{summary['status_icon']} <b>{title}</b> ‚Äî {description}\n"
                f"   –ù–∞—Å—Ç—Ä–æ–µ–∫: {summary['total']} ¬∑ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {overrides}"
            )
        )
    lines.append("")
    lines.append("üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.")
    lines.append("üí° –ü—Ä–µ—Å–µ—Ç—ã –ø–æ–º–æ–≥—É—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.")

    return "\n".join(lines)


def _render_group_text(group_key: str, group_title: str) -> str:
    summary = _summarize_menu_category(group_key)
    menu_category = _resolve_menu_category(group_key)
    description = menu_category.description if menu_category else "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"

    lines = [
        "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</b>",
        f"–ì–ª–∞–≤–Ω–∞—è ‚Üí {group_title}",
        "",
        f"{summary['status_icon']} <b>{group_title}</b>",
        description,
        "",
        f"–ù–∞—Å—Ç—Ä–æ–µ–∫: {summary['total']} ¬∑ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {summary['overrides']}",
    ]

    if summary["issues"]:
        lines.append("")
        lines.append("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:")
        for issue in summary["issues"][:5]:
            lines.append(f"‚Ä¢ {issue}")

    lines.append("")
    lines.append("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:")

    return "\n".join(lines)


def _render_category_text(
    group_key: str,
    category_key: str,
    category_label: str,
    definitions: List[SettingDefinition],
) -> str:
    menu_category = _resolve_menu_category(group_key)
    breadcrumb = (
        f"–ì–ª–∞–≤–Ω–∞—è ‚Üí {menu_category.title if menu_category else CATEGORY_FALLBACK_TITLE} ‚Üí {category_label}"
    )
    summary = _summarize_definitions(definitions)
    description = CATEGORY_SECTION_DESCRIPTIONS.get(
        category_key,
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–∞ ¬´{category_label}¬ª.",
    )

    lines = [
        "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</b>",
        breadcrumb,
        "",
        f"{summary['status_icon']} <b>{category_label}</b>",
        description,
        "",
        f"–ù–∞—Å—Ç—Ä–æ–µ–∫: {summary['total']} ¬∑ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {summary['overrides']}",
    ]

    if summary["issues"]:
        lines.append("")
        lines.append("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:")
        for issue in summary["issues"][:5]:
            lines.append(f"‚Ä¢ {issue}")

    lines.append("")
    lines.append("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")

    return "\n".join(lines)


def _build_categories_keyboard(
    group_key: str,
    group_title: str,
    categories: List[Tuple[str, str, int]],
    page: int = 1,
) -> types.InlineKeyboardMarkup:
    total_pages = max(1, math.ceil(len(categories) / CATEGORY_PAGE_SIZE))
    page = max(1, min(page, total_pages))

    start = (page - 1) * CATEGORY_PAGE_SIZE
    end = start + CATEGORY_PAGE_SIZE
    sliced = categories[start:end]

    rows: list[list[types.InlineKeyboardButton]] = []
    rows.append(
        [
            types.InlineKeyboardButton(
                text=f"‚Äî {group_title} ‚Äî",
                callback_data="botcfg_group:noop",
            )
        ]
    )

    buttons: List[types.InlineKeyboardButton] = []
    for category_key, label, count in sliced:
        definitions = bot_configuration_service.get_settings_for_category(category_key)
        summary = _summarize_definitions(definitions)
        overrides = summary["overrides"]
        button_text = f"{summary['status_icon']} {label} ¬∑ {summary['total']}"
        if overrides:
            button_text += f" ‚Ä¢ ‚öôÔ∏è{overrides}"
        buttons.append(
            types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"botcfg_cat:{group_key}:{category_key}:{page}:1",
            )
        )

    for chunk in _chunk(buttons, 2):
        rows.append(list(chunk))

    if total_pages > 1:
        nav_row: list[types.InlineKeyboardButton] = []
        if page > 1:
            nav_row.append(
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"botcfg_group:{group_key}:{page - 1}",
                )
            )
        nav_row.append(
            types.InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="botcfg_group:noop",
            )
        )
        if page < total_pages:
            nav_row.append(
                types.InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"botcfg_group:{group_key}:{page + 1}",
                )
            )
        rows.append(nav_row)

    rows.append(
        [
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ö —Ä–∞–∑–¥–µ–ª–∞–º",
                callback_data="admin_bot_config",
            )
        ]
    )

    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _build_settings_keyboard(
    category_key: str,
    group_key: str,
    category_page: int,
    language: str,
    page: int = 1,
) -> types.InlineKeyboardMarkup:
    definitions = bot_configuration_service.get_settings_for_category(category_key)
    total_pages = max(1, math.ceil(len(definitions) / SETTINGS_PAGE_SIZE))
    page = max(1, min(page, total_pages))

    start = (page - 1) * SETTINGS_PAGE_SIZE
    end = start + SETTINGS_PAGE_SIZE
    sliced = definitions[start:end]

    rows: list[list[types.InlineKeyboardButton]] = []
    texts = get_texts(language)

    if category_key == "REMNAWAVE":
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="üîå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                    callback_data=(
                        f"botcfg_test_remnawave:{group_key}:{category_key}:{category_page}:{page}"
                    ),
                )
            ]
        )

    test_payment_buttons: list[list[types.InlineKeyboardButton]] = []

    def _test_button(text: str, method: str) -> types.InlineKeyboardButton:
        return types.InlineKeyboardButton(
            text=text,
            callback_data=(
                f"botcfg_test_payment:{method}:{group_key}:{category_key}:{category_page}:{page}"
            ),
        )

    if category_key == "YOOKASSA":
        label = texts.t("PAYMENT_CARD_YOOKASSA", "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (YooKassa)")
        test_payment_buttons.append([_test_button(f"{label} ¬∑ —Ç–µ—Å—Ç", "yookassa")])
    elif category_key == "TRIBUTE":
        label = texts.t("PAYMENT_CARD_TRIBUTE", "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (Tribute)")
        test_payment_buttons.append([_test_button(f"{label} ¬∑ —Ç–µ—Å—Ç", "tribute")])
    elif category_key == "MULENPAY":
        label = texts.t("PAYMENT_CARD_MULENPAY", "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (Mulen Pay)")
        test_payment_buttons.append([_test_button(f"{label} ¬∑ —Ç–µ—Å—Ç", "mulenpay")])
    elif category_key == "PAL24":
        label = texts.t("PAYMENT_CARD_PAL24", "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (PayPalych)")
        test_payment_buttons.append([_test_button(f"{label} ¬∑ —Ç–µ—Å—Ç", "pal24")])
    elif category_key == "TELEGRAM":
        label = texts.t("PAYMENT_TELEGRAM_STARS", "‚≠ê Telegram Stars")
        test_payment_buttons.append([_test_button(f"{label} ¬∑ —Ç–µ—Å—Ç", "stars")])
    elif category_key == "CRYPTOBOT":
        label = texts.t("PAYMENT_CRYPTOBOT", "ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (CryptoBot)")
        test_payment_buttons.append([_test_button(f"{label} ¬∑ —Ç–µ—Å—Ç", "cryptobot")])

    if test_payment_buttons:
        rows.extend(test_payment_buttons)

    for definition in sliced:
        value = bot_configuration_service.get_current_value(definition.key)
        metadata = _get_setting_metadata(definition.key, definition)
        value_preview = _format_setting_value(
            definition,
            value,
            metadata,
            short=True,
        )
        status_icon = _setting_status_icon(definition, value)
        button_text = f"{status_icon} {definition.display_name} ¬∑ {value_preview}"
        if len(button_text) > 64:
            button_text = button_text[:63] + "‚Ä¶"
        callback_token = bot_configuration_service.get_callback_token(definition.key)
        rows.append(
            [
                types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=(
                        f"botcfg_setting:{group_key}:{category_page}:{page}:{callback_token}"
                    ),
                )
            ]
        )

    if total_pages > 1:
        nav_row: list[types.InlineKeyboardButton] = []
        if page > 1:
            nav_row.append(
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=(
                        f"botcfg_cat:{group_key}:{category_key}:{category_page}:{page - 1}"
                    ),
                )
            )
        nav_row.append(
            types.InlineKeyboardButton(
                text=f"{page}/{total_pages}", callback_data="botcfg_cat_page:noop"
            )
        )
        if page < total_pages:
            nav_row.append(
                types.InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=(
                        f"botcfg_cat:{group_key}:{category_key}:{category_page}:{page + 1}"
                    ),
                )
            )
        rows.append(nav_row)

    rows.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data=f"botcfg_group:{group_key}:{category_page}",
        )
    ])

    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _build_setting_keyboard(
    key: str,
    group_key: str,
    category_page: int,
    settings_page: int,
) -> types.InlineKeyboardMarkup:
    definition = bot_configuration_service.get_definition(key)
    rows: list[list[types.InlineKeyboardButton]] = []
    callback_token = bot_configuration_service.get_callback_token(key)
    metadata = _get_setting_metadata(key, definition)
    current_value = bot_configuration_service.get_current_value(key)
    kind = _determine_setting_kind(definition)

    choice_options = bot_configuration_service.get_choice_options(key)
    if choice_options:
        current_value = bot_configuration_service.get_current_value(key)
        choice_buttons: list[types.InlineKeyboardButton] = []
        for option in choice_options:
            choice_token = bot_configuration_service.get_choice_token(key, option.value)
            if choice_token is None:
                continue
            button_text = option.label
            if current_value == option.value and not button_text.startswith("‚úÖ"):
                button_text = f"‚úÖ {button_text}"
            choice_buttons.append(
                types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=(
                        f"botcfg_choice:{group_key}:{category_page}:{settings_page}:{callback_token}:{choice_token}"
                    ),
                )
            )

        for chunk in _chunk(choice_buttons, 2):
            rows.append(list(chunk))

    if kind == SettingKind.TOGGLE:
        rows.append([
            types.InlineKeyboardButton(
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å",
                callback_data=(
                    f"botcfg_bool:{group_key}:{category_page}:{settings_page}:{callback_token}:1"
                ),
            ),
            types.InlineKeyboardButton(
                text="‚ùå –í—ã–∫–ª—é—á–∏—Ç—å",
                callback_data=(
                    f"botcfg_bool:{group_key}:{category_page}:{settings_page}:{callback_token}:0"
                ),
            ),
        ])
        rows.append([
            types.InlineKeyboardButton(
                text="üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å",
                callback_data=(
                    f"botcfg_toggle:{group_key}:{category_page}:{settings_page}:{callback_token}"
                ),
            )
        ])

    rows.append([
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
            callback_data=(
                f"botcfg_edit:{group_key}:{category_page}:{settings_page}:{callback_token}"
            ),
        )
    ])

    if metadata.recommended and metadata.recommended.strip():
        rows.append([
            types.InlineKeyboardButton(
                text="üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ",
                callback_data=(
                    f"botcfg_apply_rec:{group_key}:{category_page}:{settings_page}:{callback_token}"
                ),
            )
        ])

    if kind == SettingKind.LIST:
        rows.append([
            types.InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å",
                callback_data=(
                    f"botcfg_list_add:{group_key}:{category_page}:{settings_page}:{callback_token}"
                ),
            ),
            types.InlineKeyboardButton(
                text="‚ûñ –£–¥–∞–ª–∏—Ç—å",
                callback_data=(
                    f"botcfg_list_remove:{group_key}:{category_page}:{settings_page}:{callback_token}"
                ),
            ),
        ])

    rows.append([
        types.InlineKeyboardButton(
            text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑‚Ä¶",
            callback_data=(
                f"botcfg_copy:{group_key}:{category_page}:{settings_page}:{callback_token}"
            ),
        )
    ])

    if bot_configuration_service.has_override(key):
        rows.append([
            types.InlineKeyboardButton(
                text="‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å",
                callback_data=(
                    f"botcfg_reset:{group_key}:{category_page}:{settings_page}:{callback_token}"
                ),
            )
        ])

    rows.append([
        types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=(
                f"botcfg_cat:{group_key}:{definition.category_key}:{category_page}:{settings_page}"
            ),
        )
    ])

    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def _render_setting_text(key: str) -> str:
    summary = bot_configuration_service.get_setting_summary(key)
    definition = bot_configuration_service.get_definition(key)
    metadata = _get_setting_metadata(key, definition)
    current_value = bot_configuration_service.get_current_value(key)
    original_value = bot_configuration_service.get_original_value(key)
    category_key = summary["category_key"]
    group_key = _find_menu_key_for_category(category_key)
    menu_category = _resolve_menu_category(group_key)

    current_display = _format_setting_value(definition, current_value, metadata, short=False)
    original_display = (
        _format_setting_value(definition, original_value, metadata, short=False)
        if original_value not in (None, "")
        else "‚Äî"
    )
    status_icon = _setting_status_icon(definition, current_value)

    lines = [
        "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</b>",
        (
            f"–ì–ª–∞–≤–Ω–∞—è ‚Üí {menu_category.title if menu_category else CATEGORY_FALLBACK_TITLE} ‚Üí "
            f"{summary['category_label']} ‚Üí {summary['name']}"
        ),
        "",
        f"{status_icon} <b>{summary['name']}</b>",
        metadata.description or f"–ü–∞—Ä–∞–º–µ—Ç—Ä {summary['name']}.",
        "",
        f"üîë <b>–ö–ª—é—á:</b> <code>{summary['key']}</code>",
        f"üß© <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {summary['category_label']}",
        f"üß∑ <b>–¢–∏–ø:</b> {summary['type']}",
        "",
        f"{status_icon} <b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {current_display}",
        f"üì¶ <b>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b> {original_display}",
        f"üõ† <b>–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ:</b> {'–î–∞' if summary['has_override'] else '–ù–µ—Ç'}",
    ]

    if metadata.recommended and metadata.recommended.strip():
        try:
            recommended_value = bot_configuration_service.parse_user_value(
                key, metadata.recommended
            )
            recommended_display = _format_setting_value(
                definition, recommended_value, metadata, short=False
            )
        except ValueError:
            recommended_display = metadata.recommended
        lines.append(f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ:</b> {recommended_display}")

    if metadata.format_hint:
        lines.append("")
        lines.append(f"‚ÑπÔ∏è <b>–§–æ—Ä–º–∞—Ç:</b> {metadata.format_hint}")

    if metadata.unit:
        lines.append(f"üìè <b>–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:</b> {metadata.unit}")

    if metadata.dependencies:
        lines.append(f"üîó <b>–°–≤—è–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b> {metadata.dependencies}")

    if metadata.warning:
        lines.append(f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b> {metadata.warning}")

    if metadata.doc_link:
        lines.append(f"üìò <a href=\"{metadata.doc_link}\">–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a>")

    choices = bot_configuration_service.get_choice_options(key)
    if choices:
        current_raw = bot_configuration_service.get_current_value(key)
        lines.append("")
        lines.append("<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>")
        for option in choices:
            marker = "‚úÖ" if current_raw == option.value else "‚Ä¢"
            value_display = html.escape(str(option.value))
            description = option.description or ""
            if description:
                lines.append(
                    f"{marker} {option.label} ‚Äî <code>{value_display}</code>\n   {description}"
                )
            else:
                lines.append(f"{marker} {option.label} ‚Äî <code>{value_display}</code>")

    if metadata.highlight:
        lines.append("")
        lines.append(f"‚ú® <b>{metadata.highlight}</b>")

    return "\n".join(lines)


@admin_required
@error_handler
async def show_bot_config_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    keyboard = _build_groups_keyboard()
    text = _render_main_menu_text()
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def show_bot_config_group(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    group_key, page = _parse_group_payload(callback.data)
    grouped = _get_grouped_categories()
    group_lookup = {key: (title, items) for key, title, items in grouped}

    if group_key not in group_lookup:
        await callback.answer("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    group_title, items = group_lookup[group_key]
    keyboard = _build_categories_keyboard(group_key, group_title, items, page)
    text = _render_group_text(group_key, group_title)
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def show_bot_config_category(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    group_key, category_key, category_page, settings_page = _parse_category_payload(
        callback.data
    )
    definitions = bot_configuration_service.get_settings_for_category(category_key)

    if not definitions:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
        return

    category_label = definitions[0].category_label
    keyboard = _build_settings_keyboard(
        category_key,
        group_key,
        category_page,
        db_user.language,
        settings_page,
    )
    text = _render_category_text(group_key, category_key, category_label, definitions)
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def test_remnawave_connection(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    parts = callback.data.split(":", 5)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    category_key = parts[2] if len(parts) > 2 else "REMNAWAVE"

    try:
        category_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        category_page = 1

    try:
        settings_page = max(1, int(parts[4])) if len(parts) > 4 else 1
    except ValueError:
        settings_page = 1

    service = RemnaWaveService()
    result = await service.test_api_connection()

    status = result.get("status")
    message: str

    if status == "connected":
        message = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"
    elif status == "not_configured":
        message = f"‚ö†Ô∏è {result.get('message', 'RemnaWave API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}"
    else:
        base_message = result.get("message", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        status_code = result.get("status_code")
        if status_code:
            message = f"‚ùå {base_message} (HTTP {status_code})"
        else:
            message = f"‚ùå {base_message}"

    definitions = bot_configuration_service.get_settings_for_category(category_key)
    if definitions:
        keyboard = _build_settings_keyboard(
            category_key,
            group_key,
            category_page,
            db_user.language,
            settings_page,
        )
        try:
            await callback.message.edit_reply_markup(reply_markup=keyboard)
        except Exception:
            # ignore inability to refresh markup, main result shown in alert
            pass

    await callback.answer(message, show_alert=True)


@admin_required
@error_handler
async def test_payment_provider(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    parts = callback.data.split(":", 6)
    method = parts[1] if len(parts) > 1 else ""
    group_key = parts[2] if len(parts) > 2 else CATEGORY_FALLBACK_KEY
    category_key = parts[3] if len(parts) > 3 else "PAYMENT"

    try:
        category_page = max(1, int(parts[4])) if len(parts) > 4 else 1
    except ValueError:
        category_page = 1

    try:
        settings_page = max(1, int(parts[5])) if len(parts) > 5 else 1
    except ValueError:
        settings_page = 1

    language = db_user.language
    texts = get_texts(language)
    payment_service = PaymentService(callback.bot)

    message_text: str

    async def _refresh_markup() -> None:
        definitions = bot_configuration_service.get_settings_for_category(category_key)
        if definitions:
            keyboard = _build_settings_keyboard(
                category_key,
                group_key,
                category_page,
                language,
                settings_page,
            )
            try:
                await callback.message.edit_reply_markup(reply_markup=keyboard)
            except Exception:
                pass

    if method == "yookassa":
        if not settings.is_yookassa_enabled():
            await callback.answer("‚ùå YooKassa –æ—Ç–∫–ª—é—á–µ–Ω–∞", show_alert=True)
            return

        amount_kopeks = 10 * 100
        description = settings.get_balance_payment_description(amount_kopeks)
        payment_result = await payment_service.create_yookassa_payment(
            db=db,
            user_id=db_user.id,
            amount_kopeks=amount_kopeks,
            description=f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ (–∞–¥–º–∏–Ω): {description}",
            metadata={
                "user_telegram_id": str(db_user.telegram_id),
                "purpose": "admin_test_payment",
                "provider": "yookassa",
            },
        )

        if not payment_result or not payment_result.get("confirmation_url"):
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ YooKassa", show_alert=True)
            await _refresh_markup()
            return

        confirmation_url = payment_result["confirmation_url"]
        message_text = (
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ YooKassa</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {texts.format_price(amount_kopeks)}\n"
            f"üÜî ID: {payment_result['yookassa_payment_id']}"
        )
        reply_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π",
                        url=confirmation_url,
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=f"check_yookassa_{payment_result['local_payment_id']}",
                    )
                ],
            ]
        )
        await callback.message.answer(message_text, reply_markup=reply_markup, parse_mode="HTML")
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ YooKassa –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        await _refresh_markup()
        return

    if method == "tribute":
        if not settings.TRIBUTE_ENABLED:
            await callback.answer("‚ùå Tribute –æ—Ç–∫–ª—é—á–µ–Ω", show_alert=True)
            return

        tribute_service = TributeService(callback.bot)
        try:
            payment_url = await tribute_service.create_payment_link(
                user_id=db_user.telegram_id,
                amount_kopeks=10 * 100,
                description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ Tribute (–∞–¥–º–∏–Ω)",
            )
        except Exception:
            payment_url = None

        if not payment_url:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ Tribute", show_alert=True)
            await _refresh_markup()
            return

        message_text = (
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ Tribute</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {texts.format_price(10 * 100)}\n"
            "üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É."
        )
        reply_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                        url=payment_url,
                    )
                ]
            ]
        )
        await callback.message.answer(message_text, reply_markup=reply_markup, parse_mode="HTML")
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ Tribute –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        await _refresh_markup()
        return

    if method == "mulenpay":
        if not settings.is_mulenpay_enabled():
            await callback.answer("‚ùå MulenPay –æ—Ç–∫–ª—é—á–µ–Ω", show_alert=True)
            return

        amount_kopeks = 1 * 100
        payment_result = await payment_service.create_mulenpay_payment(
            db=db,
            user_id=db_user.id,
            amount_kopeks=amount_kopeks,
            description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ MulenPay (–∞–¥–º–∏–Ω)",
            language=language,
        )

        if not payment_result or not payment_result.get("payment_url"):
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ MulenPay", show_alert=True)
            await _refresh_markup()
            return

        payment_url = payment_result["payment_url"]
        message_text = (
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ MulenPay</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {texts.format_price(amount_kopeks)}\n"
            f"üÜî ID: {payment_result['mulen_payment_id']}"
        )
        reply_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                        url=payment_url,
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=f"check_mulenpay_{payment_result['local_payment_id']}",
                    )
                ],
            ]
        )
        await callback.message.answer(message_text, reply_markup=reply_markup, parse_mode="HTML")
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ MulenPay –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        await _refresh_markup()
        return

    if method == "pal24":
        if not settings.is_pal24_enabled():
            await callback.answer("‚ùå PayPalych –æ—Ç–∫–ª—é—á–µ–Ω", show_alert=True)
            return

        amount_kopeks = 10 * 100
        payment_result = await payment_service.create_pal24_payment(
            db=db,
            user_id=db_user.id,
            amount_kopeks=amount_kopeks,
            description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ PayPalych (–∞–¥–º–∏–Ω)",
            language=language or "ru",
        )

        if not payment_result:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ PayPalych", show_alert=True)
            await _refresh_markup()
            return

        sbp_url = (
            payment_result.get("sbp_url")
            or payment_result.get("transfer_url")
            or payment_result.get("link_url")
        )
        card_url = payment_result.get("card_url")
        fallback_url = payment_result.get("link_page_url") or payment_result.get("link_url")

        if not (sbp_url or card_url or fallback_url):
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ PayPalych", show_alert=True)
            await _refresh_markup()
            return

        if not sbp_url:
            sbp_url = fallback_url

        default_sbp_text = texts.t(
            "PAL24_SBP_PAY_BUTTON",
            "üè¶ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ PayPalych (–°–ë–ü)",
        )
        sbp_button_text = settings.get_pal24_sbp_button_text(default_sbp_text)

        default_card_text = texts.t(
            "PAL24_CARD_PAY_BUTTON",
            "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π (PayPalych)",
        )
        card_button_text = settings.get_pal24_card_button_text(default_card_text)

        pay_rows: list[list[types.InlineKeyboardButton]] = []
        if sbp_url:
            pay_rows.append([
                types.InlineKeyboardButton(
                    text=sbp_button_text,
                    url=sbp_url,
                )
            ])

        if card_url and card_url != sbp_url:
            pay_rows.append([
                types.InlineKeyboardButton(
                    text=card_button_text,
                    url=card_url,
                )
            ])

        if not pay_rows and fallback_url:
            pay_rows.append([
                types.InlineKeyboardButton(
                    text=sbp_button_text,
                    url=fallback_url,
                )
            ])

        message_text = (
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ PayPalych</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {texts.format_price(amount_kopeks)}\n"
            f"üÜî Bill ID: {payment_result['bill_id']}"
        )
        keyboard_rows = pay_rows + [
            [
                types.InlineKeyboardButton(
                    text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                    callback_data=f"check_pal24_{payment_result['local_payment_id']}",
                )
            ],
        ]

        reply_markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
        await callback.message.answer(message_text, reply_markup=reply_markup, parse_mode="HTML")
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ PayPalych –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        await _refresh_markup()
        return

    if method == "stars":
        if not settings.TELEGRAM_STARS_ENABLED:
            await callback.answer("‚ùå Telegram Stars –æ—Ç–∫–ª—é—á–µ–Ω—ã", show_alert=True)
            return

        stars_rate = settings.get_stars_rate()
        amount_kopeks = max(1, int(round(stars_rate * 100)))
        payload = f"admin_stars_test_{db_user.id}_{int(time.time())}"
        try:
            invoice_link = await payment_service.create_stars_invoice(
                amount_kopeks=amount_kopeks,
                description="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ Telegram Stars (–∞–¥–º–∏–Ω)",
                payload=payload,
            )
        except Exception:
            invoice_link = None

        if not invoice_link:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ Telegram Stars", show_alert=True)
            await _refresh_markup()
            return

        stars_amount = TelegramStarsService.calculate_stars_from_rubles(amount_kopeks / 100)
        message_text = (
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ Telegram Stars</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {texts.format_price(amount_kopeks)}\n"
            f"‚≠ê –ö –æ–ø–ª–∞—Ç–µ: {stars_amount}"
        )
        reply_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=texts.t("PAYMENT_TELEGRAM_STARS", "‚≠ê –û—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç"),
                        url=invoice_link,
                    )
                ]
            ]
        )
        await callback.message.answer(message_text, reply_markup=reply_markup, parse_mode="HTML")
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ Stars –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        await _refresh_markup()
        return

    if method == "cryptobot":
        if not settings.is_cryptobot_enabled():
            await callback.answer("‚ùå CryptoBot –æ—Ç–∫–ª—é—á–µ–Ω", show_alert=True)
            return

        amount_rubles = 100.0
        try:
            current_rate = await currency_converter.get_usd_to_rub_rate()
        except Exception:
            current_rate = None

        if not current_rate or current_rate <= 0:
            current_rate = 100.0

        amount_usd = round(amount_rubles / current_rate, 2)
        if amount_usd < 1:
            amount_usd = 1.0

        payment_result = await payment_service.create_cryptobot_payment(
            db=db,
            user_id=db_user.id,
            amount_usd=amount_usd,
            asset=settings.CRYPTOBOT_DEFAULT_ASSET,
            description=f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ CryptoBot {amount_rubles:.0f} ‚ÇΩ ({amount_usd:.2f} USD)",
            payload=f"admin_cryptobot_test_{db_user.id}_{int(time.time())}",
        )

        if not payment_result:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ CryptoBot", show_alert=True)
            await _refresh_markup()
            return

        payment_url = (
            payment_result.get("bot_invoice_url")
            or payment_result.get("mini_app_invoice_url")
            or payment_result.get("web_app_invoice_url")
        )

        if not payment_url:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É CryptoBot", show_alert=True)
            await _refresh_markup()
            return

        amount_kopeks = int(amount_rubles * 100)
        message_text = (
            "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ CryptoBot</b>\n\n"
            f"üí∞ –°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: {texts.format_price(amount_kopeks)}\n"
            f"üíµ –ö –æ–ø–ª–∞—Ç–µ: {amount_usd:.2f} USD\n"
            f"ü™ô –ê–∫—Ç–∏–≤: {payment_result['asset']}"
        )
        reply_markup = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="ü™ô –û—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç", url=payment_url)
                ],
                [
                    types.InlineKeyboardButton(
                        text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=f"check_cryptobot_{payment_result['local_payment_id']}",
                    )
                ],
            ]
        )
        await callback.message.answer(message_text, reply_markup=reply_markup, parse_mode="HTML")
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂ CryptoBot –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        await _refresh_markup()
        return

    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    await _refresh_markup()


@admin_required
@error_handler
async def show_bot_config_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 4)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer()
    await callback.answer()


@admin_required
@error_handler
async def start_edit_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 4)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    definition = bot_configuration_service.get_definition(key)

    summary = bot_configuration_service.get_setting_summary(key)
    texts = get_texts(db_user.language)

    instructions = [
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>",
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {summary['name']}",
        f"–ö–ª—é—á: <code>{summary['key']}</code>",
        f"–¢–∏–ø: {summary['type']}",
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {summary['current']}",
        "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
    ]

    if definition.is_optional:
        instructions.append("–û—Ç–ø—Ä–∞–≤—å—Ç–µ 'none' –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

    instructions.append("–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'cancel'.")

    await callback.message.edit_text(
        "\n".join(instructions),
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=texts.BACK,
                        callback_data=(
                            f"botcfg_setting:{group_key}:{category_page}:{settings_page}:{token}"
                        ),
                    )
                ]
            ]
        ),
    )

    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await state.set_state(BotConfigStates.waiting_for_value)
    await callback.answer()


@admin_required
@error_handler
async def handle_edit_setting(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    data = await state.get_data()
    key = data.get("setting_key")
    group_key = data.get("setting_group_key", CATEGORY_FALLBACK_KEY)
    category_page = data.get("setting_category_page", 1)
    settings_page = data.get("setting_settings_page", 1)

    if not key:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    old_value = bot_configuration_service.get_current_value(key)
    try:
        value = bot_configuration_service.parse_user_value(key, message.text or "")
    except ValueError as error:
        await message.answer(f"‚ö†Ô∏è {error}")
        return

    await bot_configuration_service.set_value(db, key, value)
    await db.commit()
    _log_setting_change(key, old_value, value, "manual_input")

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    await message.answer(text, reply_markup=keyboard)
    await state.clear()
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )


@admin_required
@error_handler
async def handle_direct_setting_input(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    data = await state.get_data()

    key = data.get("setting_key")
    group_key = data.get("setting_group_key", CATEGORY_FALLBACK_KEY)
    category_page = int(data.get("setting_category_page", 1) or 1)
    settings_page = int(data.get("setting_settings_page", 1) or 1)

    if not key:
        return

    try:
        value = bot_configuration_service.parse_user_value(key, message.text or "")
    except ValueError as error:
        await message.answer(f"‚ö†Ô∏è {error}")
        return

    old_value = bot_configuration_service.get_current_value(key)
    await bot_configuration_service.set_value(db, key, value)
    await db.commit()
    _log_setting_change(key, old_value, value, "direct_input")

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await message.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    await state.clear()
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )


@admin_required
@error_handler
async def handle_list_input(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    data = await state.get_data()
    key = data.get("setting_key")
    operation = data.get("list_operation")
    group_key = data.get("setting_group_key", CATEGORY_FALLBACK_KEY)
    category_page = int(data.get("setting_category_page", 1) or 1)
    settings_page = int(data.get("setting_settings_page", 1) or 1)

    if not key or operation not in {"add", "remove"}:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    definition = bot_configuration_service.get_definition(key)
    current_raw = bot_configuration_service.get_current_value(key)
    items = _to_list(current_raw)

    raw_text = (message.text or "").strip()
    if not raw_text:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    new_elements = [element.strip() for element in raw_text.split(",") if element.strip()]
    if not new_elements:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    changed = False
    if operation == "add":
        for element in new_elements:
            if element not in items:
                items.append(element)
                changed = True
        if not changed:
            await message.answer("‚ÑπÔ∏è –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ.")
            return
    else:
        removed = 0
        for element in new_elements:
            while element in items:
                items.remove(element)
                removed += 1
        if removed == 0:
            await message.answer("‚ÑπÔ∏è –ù–∏ –æ–¥–Ω–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ.")
            return

    new_value_str = ", ".join(items)
    old_value = current_raw
    await bot_configuration_service.set_value(db, key, new_value_str)
    await db.commit()
    _log_setting_change(key, old_value, new_value_str, f"list_{operation}")

    await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    await state.clear()
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )


@admin_required
@error_handler
async def start_copy_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 5)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""

    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await state.set_state(BotConfigStates.waiting_for_copy_source)
    await callback.message.answer(
        "üìã <b>–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ.",
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def handle_copy_source(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    data = await state.get_data()
    target_key = data.get("setting_key")
    group_key = data.get("setting_group_key", CATEGORY_FALLBACK_KEY)
    category_page = int(data.get("setting_category_page", 1) or 1)
    settings_page = int(data.get("setting_settings_page", 1) or 1)

    if not target_key:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
        await state.clear()
        return

    source_key = (message.text or "").strip().upper()
    if not source_key:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return

    try:
        bot_configuration_service.get_definition(source_key)
    except KeyError:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    source_value = bot_configuration_service.get_current_value(source_key)
    serialized = bot_configuration_service.serialize_value(source_key, source_value)
    if serialized is None:
        serialized = ""

    try:
        parsed_value = bot_configuration_service.parse_user_value(target_key, serialized)
    except ValueError as error:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ: {error}")
        return

    old_value = bot_configuration_service.get_current_value(target_key)
    await bot_configuration_service.set_value(db, target_key, parsed_value)
    await db.commit()
    _log_setting_change(target_key, old_value, parsed_value, f"copy:{source_key}")

    await message.answer("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")
    text = _render_setting_text(target_key)
    keyboard = _build_setting_keyboard(target_key, group_key, category_page, settings_page)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    await state.clear()
    await _store_setting_context(
        state,
        key=target_key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )


@admin_required
@error_handler
async def start_settings_search(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    await state.set_state(BotConfigStates.waiting_for_search_query)
    await state.update_data(botcfg_origin="bot_config", botcfg_timestamp=time.time())
    await callback.message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–ª—é—á –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def handle_search_query(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    query = (message.text or "").strip().lower()
    if len(query) < 2:
        await message.answer("‚ö†Ô∏è –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return

    results = []
    for definition in _iter_all_definitions():
        metadata = _get_setting_metadata(definition.key, definition)
        haystack = " ".join(
            filter(
                None,
                [
                    definition.display_name.lower(),
                    definition.key.lower(),
                    (metadata.description or "").lower(),
                    (metadata.format_hint or "").lower(),
                ],
            )
        )
        if query in haystack:
            results.append(definition)
        if len(results) >= 20:
            break

    if not results:
        await message.answer("‚ÑπÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return

    rows: list[list[types.InlineKeyboardButton]] = []
    for definition in results:
        group_key = _find_menu_key_for_category(definition.category_key)
        callback_token = bot_configuration_service.get_callback_token(definition.key)
        current_value = bot_configuration_service.get_current_value(definition.key)
        status_icon = _setting_status_icon(definition, current_value)
        rows.append(
            [
                types.InlineKeyboardButton(
                    text=f"{status_icon} {definition.display_name}",
                    callback_data=f"botcfg_setting:{group_key}:1:1:{callback_token}",
                )
            ]
        )

    summary_lines = [
        "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>",
        f"–ù–∞–π–¥–µ–Ω–æ: {len(results)}",
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
    ]

    await message.answer(
        "\n".join(summary_lines),
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=rows),
        parse_mode="HTML",
    )
    await state.clear()


@admin_required
@error_handler
async def show_history(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    if not SETTINGS_HISTORY:
        await callback.message.answer("‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞.")
        await callback.answer()
        return

    lines = ["üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>"]

    for entry in list(SETTINGS_HISTORY)[:10]:
        key = entry["key"]
        timestamp: datetime = entry["timestamp"]
        source = entry.get("source", "manual")
        try:
            definition = bot_configuration_service.get_definition(key)
            metadata = _get_setting_metadata(key, definition)
            old_display = _format_setting_value(definition, entry.get("old"), metadata, short=True)
            new_display = _format_setting_value(definition, entry.get("new"), metadata, short=True)
        except KeyError:
            old_display = str(entry.get("old"))
            new_display = str(entry.get("new"))
        time_str = timestamp.strftime("%d.%m %H:%M")
        lines.append(
            f"‚Ä¢ <code>{key}</code> ({time_str})\n"
            f"  –±—ã–ª–æ: {old_display}\n  —Å—Ç–∞–ª–æ: {new_display}\n  –∏—Å—Ç–æ—á–Ω–∏–∫: {source}"
        )

    await callback.message.answer("\n".join(lines), parse_mode="HTML")
    await callback.answer()


@admin_required
@error_handler
async def show_presets_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    rows: list[list[types.InlineKeyboardButton]] = []
    for preset_key, title in PRESET_TITLES.items():
        rows.append([
            types.InlineKeyboardButton(
                text=f"üéØ {title}",
                callback_data=f"botcfg_apply_preset:{preset_key}",
            )
        ])

    if CUSTOM_PRESETS:
        for name, payload in sorted(CUSTOM_PRESETS.items()):
            rows.append([
                types.InlineKeyboardButton(
                    text=f"‚≠ê {payload.get('title', name)}",
                    callback_data=f"botcfg_apply_preset:custom:{name}",
                )
            ])

    rows.append([
        types.InlineKeyboardButton(
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            callback_data="botcfg_save_preset",
        )
    ])
    rows.append([
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_bot_config")
    ])

    description_lines = [
        "üéõ <b>–ü—Ä–µ—Å–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>",
        "–ë—ã—Å—Ç—Ä–æ –ø—Ä–∏–º–µ–Ω—è–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–≤–æ—é.",
    ]

    await callback.message.answer(
        "\n".join(description_lines),
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=rows),
        parse_mode="HTML",
    )
    await callback.answer()


async def _apply_preset_values(
    db: AsyncSession,
    preset_values: Dict[str, Any],
    *,
    source: str,
) -> List[str]:
    applied: List[str] = []
    for key, raw_value in preset_values.items():
        try:
            definition = bot_configuration_service.get_definition(key)
        except KeyError:
            continue

        old_value = bot_configuration_service.get_current_value(key)

        if isinstance(raw_value, str):
            try:
                new_value = bot_configuration_service.parse_user_value(key, raw_value)
            except ValueError:
                continue
        else:
            new_value = raw_value

        if new_value == old_value:
            continue

        await bot_configuration_service.set_value(db, key, new_value)
        applied.append(key)
        _log_setting_change(key, old_value, new_value, source)

    if applied:
        await db.commit()

    return applied


@admin_required
@error_handler
async def apply_preset(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    parts = callback.data.split(":", 1)
    preset_id = parts[1] if len(parts) > 1 else ""

    if preset_id.startswith("custom:"):
        preset_key = preset_id.split(":", 1)[1]
        preset_entry = CUSTOM_PRESETS.get(preset_key)
        if not preset_entry:
            await callback.answer("–≠—Ç–æ—Ç –ø—Ä–µ—Å–µ—Ç –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        preset_values = preset_entry.get("values", {})
        source = f"preset:custom:{preset_key}"
        title = preset_entry.get("title", preset_key)
    else:
        if preset_id not in PRESET_TITLES:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ—Å–µ—Ç", show_alert=True)
            return
        preset_values = PREDEFINED_PRESETS.get(preset_id, {})
        source = f"preset:{preset_id}"
        title = PRESET_TITLES.get(preset_id, preset_id)

    applied_keys = await _apply_preset_values(db, preset_values, source=source)

    if not applied_keys:
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–µ—Å–µ—Ç—É")
        return

    summary = "\n".join(f"‚Ä¢ <code>{key}</code>" for key in applied_keys)
    await callback.message.answer(
        f"‚úÖ –ü—Ä–µ—Å–µ—Ç <b>{title}</b> –ø—Ä–∏–º–µ–Ω–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n{summary}",
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def start_save_preset(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    await state.set_state(BotConfigStates.waiting_for_preset_name)
    await callback.message.answer(
        "üíæ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞.",
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def handle_preset_name(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    name_raw = (message.text or "").strip()
    if not name_raw:
        await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    key = name_raw.lower().replace(" ", "_")
    snapshot: Dict[str, str] = {}
    for definition in _iter_all_definitions():
        value = bot_configuration_service.get_current_value(definition.key)
        serialized = bot_configuration_service.serialize_value(definition.key, value)
        snapshot[definition.key] = "" if serialized is None else serialized

    CUSTOM_PRESETS[key] = {
        "title": name_raw,
        "values": snapshot,
        "created_at": datetime.utcnow(),
    }

    await message.answer(f"‚úÖ –ü—Ä–µ—Å–µ—Ç <b>{name_raw}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", parse_mode="HTML")
    await state.clear()


@admin_required
@error_handler
async def export_settings(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    lines: List[str] = []
    for definition in _iter_all_definitions():
        value = bot_configuration_service.get_current_value(definition.key)
        serialized = bot_configuration_service.serialize_value(definition.key, value)
        if serialized is None:
            serialized = ""
        lines.append(f"{definition.key}={serialized}")

    content = "\n".join(lines).encode("utf-8")
    document = BufferedInputFile(content, filename="bot-settings.env")
    await callback.message.answer_document(
        document,
        caption="üì§ –≠–∫—Å–ø–æ—Ä—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫",
    )
    await callback.answer()


@admin_required
@error_handler
async def start_import_settings(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    await state.set_state(BotConfigStates.waiting_for_import)
    await callback.message.answer(
        "üì• <b>–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def handle_import_settings(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    content = (message.text or "").strip()
    if not content:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞.")
        return

    changes: List[str] = []
    for line in content.splitlines():
        line = line.strip()
        if not line or line.startswith("#"):
            continue
        if "=" not in line:
            continue
        key, raw_value = line.split("=", 1)
        key = key.strip()
        raw_value = raw_value.strip()
        try:
            bot_configuration_service.get_definition(key)
        except KeyError:
            continue

        old_value = bot_configuration_service.get_current_value(key)
        try:
            parsed_value = bot_configuration_service.parse_user_value(key, raw_value)
        except ValueError:
            continue

        if parsed_value == old_value:
            continue

        await bot_configuration_service.set_value(db, key, parsed_value)
        _log_setting_change(key, old_value, parsed_value, "import")
        changes.append(key)

    if changes:
        await db.commit()
        summary = "\n".join(f"‚Ä¢ <code>{key}</code>" for key in changes)
        await message.answer(
            f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(changes)} –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n{summary}",
            parse_mode="HTML",
        )
    else:
        await message.answer("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await state.clear()


@admin_required
@error_handler
async def show_help(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    text = (
        "‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫</b>\n\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n"
        "‚Ä¢ –ü—Ä–µ—Å–µ—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π.\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ .env –ø–µ—Ä–µ–¥ –±–æ–ª—å—à–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ."
    )
    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()


@admin_required
@error_handler
async def reset_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 4)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    old_value = bot_configuration_service.get_current_value(key)
    await bot_configuration_service.reset_value(db, key)
    await db.commit()
    new_value = bot_configuration_service.get_current_value(key)
    _log_setting_change(key, old_value, new_value, "reset")

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer("–°–±—Ä–æ—à–µ–Ω–æ –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")


@admin_required
@error_handler
async def toggle_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 4)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    current = bot_configuration_service.get_current_value(key)
    new_value = not bool(current)
    await bot_configuration_service.set_value(db, key, new_value)
    await db.commit()
    _log_setting_change(key, current, new_value, "toggle")

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")


@admin_required
@error_handler
async def apply_setting_choice(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 5)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    choice_token = parts[5] if len(parts) > 5 else ""

    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    try:
        value = bot_configuration_service.resolve_choice_token(key, choice_token)
    except KeyError:
        await callback.answer("–≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return

    old_value = bot_configuration_service.get_current_value(key)
    await bot_configuration_service.set_value(db, key, value)
    await db.commit()
    _log_setting_change(key, old_value, value, "choice")

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")


@admin_required
@error_handler
async def set_boolean_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 6)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""
    desired_flag = parts[5] if len(parts) > 5 else "1"

    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    target_value = desired_flag == "1"
    current_value = bool(bot_configuration_service.get_current_value(key))

    if current_value == target_value:
        await callback.answer("–ó–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return

    await bot_configuration_service.set_value(db, key, target_value)
    await db.commit()
    _log_setting_change(key, current_value, target_value, "bool_set")

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")


@admin_required
@error_handler
async def apply_recommended_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    parts = callback.data.split(":", 5)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""

    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    definition = bot_configuration_service.get_definition(key)
    metadata = _get_setting_metadata(key, definition)
    if not metadata.recommended or not metadata.recommended.strip():
        await callback.answer("–î–ª—è —ç—Ç–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è", show_alert=True)
        return

    try:
        new_value = bot_configuration_service.parse_user_value(key, metadata.recommended)
    except ValueError as error:
        await callback.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ: {error}", show_alert=True)
        return

    old_value = bot_configuration_service.get_current_value(key)
    await bot_configuration_service.set_value(db, key, new_value)
    await db.commit()
    _log_setting_change(key, old_value, new_value, "recommended")

    text = _render_setting_text(key)
    keyboard = _build_setting_keyboard(key, group_key, category_page, settings_page)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await callback.answer("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")


async def _start_list_operation(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    *,
    operation: str,
) -> None:
    parts = callback.data.split(":", 5)
    group_key = parts[1] if len(parts) > 1 else CATEGORY_FALLBACK_KEY
    try:
        category_page = max(1, int(parts[2])) if len(parts) > 2 else 1
    except ValueError:
        category_page = 1
    try:
        settings_page = max(1, int(parts[3])) if len(parts) > 3 else 1
    except ValueError:
        settings_page = 1
    token = parts[4] if len(parts) > 4 else ""

    try:
        key = bot_configuration_service.resolve_callback_token(token)
    except KeyError:
        await callback.answer("–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    current_items = _to_list(bot_configuration_service.get_current_value(key))

    if operation == "remove" and not current_items:
        await callback.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å", show_alert=True)
        return

    await _store_setting_context(
        state,
        key=key,
        group_key=group_key,
        category_page=category_page,
        settings_page=settings_page,
    )
    await state.update_data(list_operation=operation)
    await state.set_state(BotConfigStates.waiting_for_list_input)

    if operation == "add":
        prompt = (
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫."
        )
    else:
        items_preview = "\n".join(f"‚Ä¢ {item}" for item in current_items[:20])
        prompt = (
            "‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
            "–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n"
            f"{items_preview or '‚Äî'}\n\n–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å."
        )

    await callback.message.answer(prompt, parse_mode="HTML")
    await callback.answer()


@admin_required
@error_handler
async def start_list_add(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    await _start_list_operation(callback, db_user, state, operation="add")


@admin_required
@error_handler
async def start_list_remove(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext,
):
    await _start_list_operation(callback, db_user, state, operation="remove")


def register_handlers(dp: Dispatcher) -> None:
    dp.callback_query.register(
        show_bot_config_menu,
        F.data == "admin_bot_config",
    )
    dp.callback_query.register(
        show_bot_config_group,
        F.data.startswith("botcfg_group:") & (~F.data.endswith(":noop")),
    )
    dp.callback_query.register(
        show_bot_config_category,
        F.data.startswith("botcfg_cat:"),
    )
    dp.callback_query.register(
        test_remnawave_connection,
        F.data.startswith("botcfg_test_remnawave:"),
    )
    dp.callback_query.register(
        test_payment_provider,
        F.data.startswith("botcfg_test_payment:"),
    )
    dp.callback_query.register(
        show_bot_config_setting,
        F.data.startswith("botcfg_setting:"),
    )
    dp.callback_query.register(
        start_edit_setting,
        F.data.startswith("botcfg_edit:"),
    )
    dp.callback_query.register(
        reset_setting,
        F.data.startswith("botcfg_reset:"),
    )
    dp.callback_query.register(
        toggle_setting,
        F.data.startswith("botcfg_toggle:"),
    )
    dp.callback_query.register(
        apply_setting_choice,
        F.data.startswith("botcfg_choice:"),
    )
    dp.callback_query.register(
        set_boolean_setting,
        F.data.startswith("botcfg_bool:"),
    )
    dp.callback_query.register(
        apply_recommended_setting,
        F.data.startswith("botcfg_apply_rec:"),
    )
    dp.callback_query.register(
        start_list_add,
        F.data.startswith("botcfg_list_add:"),
    )
    dp.callback_query.register(
        start_list_remove,
        F.data.startswith("botcfg_list_remove:"),
    )
    dp.callback_query.register(
        start_copy_setting,
        F.data.startswith("botcfg_copy:"),
    )
    dp.callback_query.register(
        start_settings_search,
        F.data == "botcfg_search",
    )
    dp.callback_query.register(
        show_history,
        F.data == "botcfg_history",
    )
    dp.callback_query.register(
        show_presets_menu,
        F.data == "botcfg_presets",
    )
    dp.callback_query.register(
        apply_preset,
        F.data.startswith("botcfg_apply_preset:"),
    )
    dp.callback_query.register(
        start_save_preset,
        F.data == "botcfg_save_preset",
    )
    dp.callback_query.register(
        export_settings,
        F.data == "botcfg_export",
    )
    dp.callback_query.register(
        start_import_settings,
        F.data == "botcfg_import",
    )
    dp.callback_query.register(
        show_help,
        F.data == "botcfg_help",
    )
    dp.message.register(
        handle_direct_setting_input,
        StateFilter(None),
        F.text,
        BotConfigInputFilter(),
    )
    dp.message.register(
        handle_edit_setting,
        BotConfigStates.waiting_for_value,
    )
    dp.message.register(
        handle_copy_source,
        BotConfigStates.waiting_for_copy_source,
    )
    dp.message.register(
        handle_search_query,
        BotConfigStates.waiting_for_search_query,
    )
    dp.message.register(
        handle_preset_name,
        BotConfigStates.waiting_for_preset_name,
    )
    dp.message.register(
        handle_import_settings,
        BotConfigStates.waiting_for_import,
    )
    dp.message.register(
        handle_list_input,
        BotConfigStates.waiting_for_list_input,
    )

