import logging
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.states import AdminStates
from app.keyboards.admin import get_welcome_text_keyboard, get_admin_main_keyboard
from app.utils.decorators import admin_required, error_handler
from app.database.crud.welcome_text import (
    get_active_welcome_text, 
    set_welcome_text, 
    get_current_welcome_text_or_default,
    get_available_placeholders
)

logger = logging.getLogger(__name__)

def get_telegram_formatting_info() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram"""
    return """
üìù <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>

‚Ä¢ <code>&lt;b&gt;–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç&lt;/b&gt;</code> ‚Üí <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>
‚Ä¢ <code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code> ‚Üí <i>–∫—É—Ä—Å–∏–≤</i>
‚Ä¢ <code>&lt;u&gt;–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π&lt;/u&gt;</code> ‚Üí <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>
‚Ä¢ <code>&lt;s&gt;–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π&lt;/s&gt;</code> ‚Üí <s>–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s>
‚Ä¢ <code>&lt;code&gt;–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π&lt;/code&gt;</code> ‚Üí <code>–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code>
‚Ä¢ <code>&lt;pre&gt;–±–ª–æ–∫ –∫–æ–¥–∞&lt;/pre&gt;</code> ‚Üí –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–¥
‚Ä¢ <code>&lt;a href="https://example.com"&gt;—Å—Å—ã–ª–∫–∞&lt;/a&gt;</code> ‚Üí —Å—Å—ã–ª–∫–∞
‚Ä¢ <code>&lt;blockquote&gt;—Ü–∏—Ç–∞—Ç–∞&lt;/blockquote&gt;</code> ‚Üí ||—Ü–∏—Ç–∞—Ç–∞||

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ —Ç–µ–≥–∏!
–õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ HTML-—Ç–µ–≥–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.

‚ùå <b>–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b> <spoiler>, &lt;div&gt;, &lt;span&gt;, &lt;p&gt;, &lt;br&gt;, &lt;h1&gt;-&lt;h6&gt;, &lt;img&gt; –∏ –¥—Ä—É–≥–∏–µ HTML-—Ç–µ–≥–∏.
"""

@admin_required
@error_handler
async def show_welcome_text_panel(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    await callback.message.edit_text(
        "üëã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
        "üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã:",
        reply_markup=get_welcome_text_keyboard(db_user.language)
    )
    await callback.answer()

@admin_required
@error_handler
async def show_current_welcome_text(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    current_text = await get_active_welcome_text(db)
    
    if not current_text:
        current_text = await get_current_welcome_text_or_default()
        status = "üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç:"
    else:
        status = "üìù –¢–µ–∫—É—â–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:"
    
    placeholders = get_available_placeholders()
    placeholders_text = "\n".join([f"‚Ä¢ <code>{key}</code> - {desc}" for key, desc in placeholders.items()])
    
    await callback.message.edit_text(
        f"{status}\n\n"
        f"<code>{current_text}</code>\n\n"
        f"üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:\n{placeholders_text}",
        reply_markup=get_welcome_text_keyboard(db_user.language),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_required
@error_handler
async def show_placeholders_help(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    placeholders = get_available_placeholders()
    placeholders_text = "\n".join([f"‚Ä¢ <code>{key}</code>\n  {desc}" for key, desc in placeholders.items()])
    
    help_text = (
        "üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã:\n\n"
        f"{placeholders_text}\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
        "‚Ä¢ <code>–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</code>\n"
        "‚Ä¢ <code>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å!</code>\n"
        "‚Ä¢ <code>–ü—Ä–∏–≤–µ—Ç, {username}! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</code>\n\n"
        "–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª–æ–≤–æ '–¥—Ä—É–≥'."
    )
    
    await callback.message.edit_text(
        help_text,
        reply_markup=get_welcome_text_keyboard(db_user.language),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_required
@error_handler
async def show_formatting_help(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    formatting_info = get_telegram_formatting_info()
    
    await callback.message.edit_text(
        formatting_info,
        reply_markup=get_welcome_text_keyboard(db_user.language),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_required
@error_handler
async def start_edit_welcome_text(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    current_text = await get_active_welcome_text(db)
    
    if not current_text:
        current_text = await get_current_welcome_text_or_default()
    
    placeholders = get_available_placeholders()
    placeholders_text = "\n".join([f"‚Ä¢ <code>{key}</code> - {desc}" for key, desc in placeholders.items()])
    
    await callback.message.edit_text(
        f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n"
        f"<code>{current_text}</code>\n\n"
        f"üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:\n{placeholders_text}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.editing_welcome_text)
    await callback.answer()

@admin_required
@error_handler
async def process_welcome_text_edit(
    message: types.Message,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    new_text = message.text.strip()
    
    if len(new_text) < 10:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    if len(new_text) > 4000:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    success = await set_welcome_text(db, new_text, db_user.id)
    
    if success:
        placeholders = get_available_placeholders()
        placeholders_text = "\n".join([f"‚Ä¢ <code>{key}</code>" for key in placeholders.keys()])
        
        await message.answer(
            f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n"
            f"<code>{new_text}</code>\n\n"
            f"üí° –ë—É–¥—É—Ç –∑–∞–º–µ–Ω—è—Ç—å—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: {placeholders_text}",
            reply_markup=get_welcome_text_keyboard(db_user.language),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_welcome_text_keyboard(db_user.language)
        )
    
    await state.clear()

@admin_required
@error_handler
async def reset_welcome_text(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    default_text = await get_current_welcome_text_or_default()
    success = await set_welcome_text(db, default_text, db_user.id)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π!\n\n"
            f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç:\n"
            f"<code>{default_text}</code>\n\n"
            f"üí° –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä <code>{{user_name}}</code> –±—É–¥–µ—Ç –∑–∞–º–µ–Ω—è—Ç—å—Å—è –Ω–∞ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=get_welcome_text_keyboard(db_user.language),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_welcome_text_keyboard(db_user.language)
        )
    
    await callback.answer()

@admin_required
@error_handler
async def show_preview_welcome_text(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    from app.database.crud.welcome_text import get_welcome_text_for_user
    
    class TestUser:
        def __init__(self):
            self.first_name = "–ò–≤–∞–Ω"
            self.username = "test_user"
    
    test_user = TestUser()
    preview_text = await get_welcome_text_for_user(db, test_user)
    
    await callback.message.edit_text(
        f"üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä\n\n"
        f"–ö–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '–ò–≤–∞–Ω' (@test_user):\n\n"
        f"<code>{preview_text}</code>",
        reply_markup=get_welcome_text_keyboard(db_user.language),
        parse_mode="HTML"
    )
    await callback.answer()

def register_welcome_text_handlers(dp: Dispatcher):
    dp.callback_query.register(
        show_welcome_text_panel,
        F.data == "welcome_text_panel"
    )
    
    dp.callback_query.register(
        show_current_welcome_text,
        F.data == "show_welcome_text"
    )
    
    dp.callback_query.register(
        show_placeholders_help,
        F.data == "show_placeholders_help"
    )
    
    dp.callback_query.register(
        show_formatting_help,
        F.data == "show_formatting_help"
    )
    
    dp.callback_query.register(
        show_preview_welcome_text,
        F.data == "preview_welcome_text"
    )
    
    dp.callback_query.register(
        start_edit_welcome_text,
        F.data == "edit_welcome_text"
    )
    
    dp.callback_query.register(
        reset_welcome_text,
        F.data == "reset_welcome_text"
    )
    
    dp.message.register(
        process_welcome_text_edit,
        AdminStates.editing_welcome_text
    )
