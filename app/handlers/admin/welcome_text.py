import logging
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.states import AdminStates
from app.keyboards.admin import get_welcome_text_keyboard, get_admin_main_keyboard
from app.utils.decorators import admin_required, error_handler
from app.database.crud.welcome_text import (
    get_active_welcome_text, 
    set_welcome_text, 
    get_current_welcome_text_or_default
)

logger = logging.getLogger(__name__)

@admin_required
@error_handler
async def show_welcome_text_panel(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    await callback.message.edit_text(
        "üëã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        reply_markup=get_welcome_text_keyboard(db_user.language)
    )
    await callback.answer()

@admin_required
@error_handler
async def show_current_welcome_text(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    current_text = await get_active_welcome_text(db)
    
    if not current_text:
        current_text = await get_current_welcome_text_or_default()
        status = "üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç:"
    else:
        status = "üìù –¢–µ–∫—É—â–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:"
    
    await callback.message.edit_text(
        f"{status}\n\n"
        f"<code>{current_text}</code>\n\n"
        f"üí° –í —Ç–µ–∫—Å—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç 'Egor'",
        reply_markup=get_welcome_text_keyboard(db_user.language),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_required
@error_handler
async def start_edit_welcome_text(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    current_text = await get_active_welcome_text(db)
    
    if not current_text:
        current_text = await get_current_welcome_text_or_default()
    
    await callback.message.edit_text(
        f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n"
        f"<code>{current_text}</code>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.editing_welcome_text)
    await callback.answer()

@admin_required
@error_handler
async def process_welcome_text_edit(
    message: types.Message,
    state: FSMContext,
    db_user: User,
    db: AsyncSession
):
    new_text = message.text.strip()
    
    if len(new_text) < 10:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    if len(new_text) > 4000:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    success = await set_welcome_text(db, new_text, db_user.id)
    
    if success:
        await message.answer(
            f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n"
            f"<code>{new_text}</code>",
            reply_markup=get_welcome_text_keyboard(db_user.language),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_welcome_text_keyboard(db_user.language)
        )
    
    await state.clear()

@admin_required
@error_handler
async def reset_welcome_text(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    default_text = await get_current_welcome_text_or_default()
    success = await set_welcome_text(db, default_text, db_user.id)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π!\n\n"
            f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç:\n"
            f"<code>{default_text}</code>",
            reply_markup=get_welcome_text_keyboard(db_user.language),
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_welcome_text_keyboard(db_user.language)
        )
    
    await callback.answer()

def register_welcome_text_handlers(dp: Dispatcher):
    dp.callback_query.register(
        show_welcome_text_panel,
        F.data == "welcome_text_panel"
    )
    
    dp.callback_query.register(
        show_current_welcome_text,
        F.data == "show_welcome_text"
    )
    
    dp.callback_query.register(
        start_edit_welcome_text,
        F.data == "edit_welcome_text"
    )
    
    dp.callback_query.register(
        reset_welcome_text,
        F.data == "reset_welcome_text"
    )
    
    dp.message.register(
        process_welcome_text_edit,
        AdminStates.editing_welcome_text
    )
