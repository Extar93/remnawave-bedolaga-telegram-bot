import logging
import os
from datetime import datetime
from pathlib import Path
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.services.backup_service import backup_service
from app.utils.decorators import admin_required, error_handler
from app.keyboards.admin import (
    get_admin_main_keyboard, 
    get_confirmation_keyboard,
    get_admin_pagination_keyboard
)

logger = logging.getLogger(__name__)


class BackupStates(StatesGroup):
    waiting_backup_file = State()
    waiting_settings_update = State()


def get_backup_main_keyboard(language: str = "ru"):
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∫–∞–ø–æ–≤"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_backup_manage_keyboard(backup_filename: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–µ–∫–∞–ø–æ–º"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"backup_restore_file_{backup_filename}"),
            InlineKeyboardButton(text="üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f"backup_info_{backup_filename}")
        ],
        [
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"backup_delete_{backup_filename}")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="backup_list")
        ]
    ])


def get_backup_settings_keyboard(settings_obj):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∫–∞–ø–æ–≤"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    auto_status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if settings_obj.auto_backup_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
    compression_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if settings_obj.compression_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
    logs_status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if settings_obj.include_logs else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"üîÑ –ê–≤—Ç–æ–±–µ–∫–∞–ø—ã: {auto_status}", 
                callback_data="backup_toggle_auto"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"üóúÔ∏è –°–∂–∞—Ç–∏–µ: {compression_status}", 
                callback_data="backup_toggle_compression"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"üìã –õ–æ–≥–∏ –≤ –±–µ–∫–∞–ø–µ: {logs_status}", 
                callback_data="backup_toggle_logs"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {settings_obj.backup_interval_hours}—á", 
                callback_data="backup_set_interval"
            ),
            InlineKeyboardButton(
                text=f"üì¶ –•—Ä–∞–Ω–∏—Ç—å: {settings_obj.max_backups_keep}—à—Ç", 
                callback_data="backup_set_retention"
            )
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup_panel")
        ]
    ])


@admin_required
@error_handler
async def show_backup_panel(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å –±–µ–∫–∞–ø–æ–≤"""
    settings_obj = await backup_service.get_backup_settings()
    
    status_auto = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if settings_obj.auto_backup_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
    
    text = f"""üóÑÔ∏è <b>–°–ò–°–¢–ï–ú–ê –ë–ï–ö–ê–ü–û–í</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b>
‚Ä¢ –ê–≤—Ç–æ–±–µ–∫–∞–ø—ã: {status_auto}
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {settings_obj.backup_interval_hours} —á–∞—Å–æ–≤
‚Ä¢ –•—Ä–∞–Ω–∏—Ç—å: {settings_obj.max_backups_keep} —Ñ–∞–π–ª–æ–≤
‚Ä¢ –°–∂–∞—Ç–∏–µ: {'–î–∞' if settings_obj.compression_enabled else '–ù–µ—Ç'}

üìÅ <b>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> <code>/app/data/backups</code>

‚ö° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –±–µ–∫–∞–ø–∞
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –±–µ–∫–∞–ø–∞–º–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
"""
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_backup_main_keyboard(db_user.language)
    )
    await callback.answer()


@admin_required
@error_handler
async def create_backup_handler(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞"""
    await callback.answer("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ –∑–∞–ø—É—â–µ–Ω–æ...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    progress_msg = await callback.message.edit_text(
        "üîÑ <b>–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞...</b>\n\n"
        "‚è≥ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
        parse_mode="HTML"
    )
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø
    success, message, file_path = await backup_service.create_backup(
        created_by=db_user.telegram_id,
        compress=True
    )
    
    if success:
        await progress_msg.edit_text(
            f"‚úÖ <b>–ë–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n{message}",
            parse_mode="HTML",
            reply_markup=get_backup_main_keyboard(db_user.language)
        )
    else:
        await progress_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–∞</b>\n\n{message}",
            parse_mode="HTML",
            reply_markup=get_backup_main_keyboard(db_user.language)
        )


@admin_required
@error_handler
async def show_backup_list(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = 1
    if callback.data.startswith("backup_list_page_"):
        try:
            page = int(callback.data.split("_")[-1])
        except:
            page = 1
    
    backups = await backup_service.get_backup_list()
    
    if not backups:
        text = "üì¶ <b>–°–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤ –ø—É—Å—Ç</b>\n\n–ë–µ–∫–∞–ø—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –±–µ–∫–∞–ø", callback_data="backup_create")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup_panel")]
        ])
    else:
        text = f"üì¶ <b>–°–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤</b> (–≤—Å–µ–≥–æ: {len(backups)})\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –±–µ–∫–∞–ø –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        keyboard = get_backup_list_keyboard(backups, page)
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@admin_required
@error_handler
async def manage_backup_file(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ñ–∞–π–ª–æ–º –±–µ–∫–∞–ø–∞"""
    filename = callback.data.replace("backup_manage_", "")
    
    backups = await backup_service.get_backup_list()
    backup_info = None
    
    for backup in backups:
        if backup["filename"] == filename:
            backup_info = backup
            break
    
    if not backup_info:
        await callback.answer("‚ùå –§–∞–π–ª –±–µ–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ–∫–∞–ø–µ
    try:
        if backup_info.get("timestamp"):
            dt = datetime.fromisoformat(backup_info["timestamp"].replace('Z', '+00:00'))
            date_str = dt.strftime("%d.%m.%Y %H:%M:%S")
        else:
            date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    except:
        date_str = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"
    
    text = f"""üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∫–∞–ø–µ</b>

üìÑ <b>–§–∞–π–ª:</b> <code>{filename}</code>
üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {date_str}
üíæ <b>–†–∞–∑–º–µ—Ä:</b> {backup_info.get('file_size_mb', 0):.2f} MB
üìä <b>–¢–∞–±–ª–∏—Ü:</b> {backup_info.get('tables_count', '?')}
üìà <b>–ó–∞–ø–∏—Å–µ–π:</b> {backup_info.get('total_records', '?'):,}
üóúÔ∏è <b>–°–∂–∞—Ç–∏–µ:</b> {'–î–∞' if backup_info.get('compressed') else '–ù–µ—Ç'}
üóÑÔ∏è <b>–ë–î:</b> {backup_info.get('database_type', 'unknown')}
"""
    
    if backup_info.get("error"):
        text += f"\n‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {backup_info['error']}"
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_backup_manage_keyboard(filename)
    )
    await callback.answer()


@admin_required
@error_handler
async def delete_backup_confirm(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–µ–∫–∞–ø–∞"""
    filename = callback.data.replace("backup_delete_", "")
    
    text = f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –±–µ–∫–∞–ø–∞</b>\n\n"
    text += f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–µ–∫–∞–ø?\n\n"
    text += f"üìÑ <code>{filename}</code>\n\n"
    text += "‚ö†Ô∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"backup_delete_confirm_{filename}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"backup_manage_{filename}")
        ]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@admin_required
@error_handler
async def delete_backup_execute(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∫–∞–ø–∞"""
    filename = callback.data.replace("backup_delete_confirm_", "")
    
    success, message = await backup_service.delete_backup(filename)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ <b>–ë–µ–∫–∞–ø —É–¥–∞–ª–µ–Ω</b>\n\n{message}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É –±–µ–∫–∞–ø–æ–≤", callback_data="backup_list")]
            ])
        )
    else:
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n{message}",
            parse_mode="HTML",
            reply_markup=get_backup_manage_keyboard(filename)
        )
    
    await callback.answer()


@admin_required
@error_handler
async def restore_backup_start(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±–µ–∫–∞–ø–∞"""
    if callback.data.startswith("backup_restore_file_"):
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        filename = callback.data.replace("backup_restore_file_", "")
        
        text = f"üì• <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±–µ–∫–∞–ø–∞</b>\n\n"
        text += f"üìÑ <b>–§–∞–π–ª:</b> <code>{filename}</code>\n\n"
        text += "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n"
        text += "‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n"
        text += "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º\n"
        text += "‚Ä¢ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω—ã\n\n"
        text += "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ?"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"backup_restore_execute_{filename}"),
                InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"backup_restore_clear_{filename}")
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"backup_manage_{filename}")
            ]
        ])
    else:
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        text = """üì• <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±–µ–∫–∞–ø–∞</b>

üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–µ–∫–∞–ø–∞ (.json –∏–ª–∏ .json.gz)

‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b>
‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∫–∞–ø–æ–≤
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º

üí° –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–µ–∫–∞–ø–æ–≤ –Ω–∏–∂–µ."""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data="backup_list")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="backup_panel")]
        ])
        
        await state.set_state(BackupStates.waiting_backup_file)
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()


@admin_required
@error_handler
async def restore_backup_execute(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∫–∞–ø–∞"""
    if callback.data.startswith("backup_restore_execute_"):
        filename = callback.data.replace("backup_restore_execute_", "")
        clear_existing = False
    elif callback.data.startswith("backup_restore_clear_"):
        filename = callback.data.replace("backup_restore_clear_", "")
        clear_existing = True
    else:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
        return
    
    await callback.answer("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    action_text = "–æ—á–∏—Å—Ç–∫–æ–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º" if clear_existing else "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"
    progress_msg = await callback.message.edit_text(
        f"üì• <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±–µ–∫–∞–ø–∞...</b>\n\n"
        f"‚è≥ –†–∞–±–æ—Ç–∞–µ–º —Å {action_text} –¥–∞–Ω–Ω—ã—Ö...\n"
        f"üìÑ –§–∞–π–ª: <code>{filename}</code>\n\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
        parse_mode="HTML"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    backup_path = backup_service.backup_dir / filename
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    success, message = await backup_service.restore_backup(
        str(backup_path),
        clear_existing=clear_existing
    )
    
    if success:
        await progress_msg.edit_text(
            f"‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n{message}",
            parse_mode="HTML",
            reply_markup=get_backup_main_keyboard(db_user.language)
        )
    else:
        await progress_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n{message}",
            parse_mode="HTML",
            reply_markup=get_backup_manage_keyboard(filename)
        )


@admin_required
@error_handler
async def handle_backup_file_upload(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    state: FSMContext
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –±–µ–∫–∞–ø–∞"""
    if not message.document:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–µ–∫–∞–ø–∞ (.json –∏–ª–∏ .json.gz)",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="backup_panel")]
            ])
        )
        return
    
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not (document.file_name.endswith('.json') or document.file_name.endswith('.json.gz')):
        await message.answer(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ .json –∏–ª–∏ .json.gz —Ñ–∞–π–ª",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="backup_panel")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 50MB)
    if document.file_size > 50 * 1024 * 1024:
        await message.answer(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 50MB)",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="backup_panel")]
            ])
        )
        return
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await message.bot.get_file(document.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_path = backup_service.backup_dir / f"uploaded_{document.file_name}"
        
        await message.bot.download_file(file.file_path, temp_path)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        text = f"""üì• <b>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω</b>

üìÑ <b>–ò–º—è:</b> <code>{document.file_name}</code>
üíæ <b>–†–∞–∑–º–µ—Ä:</b> {document.file_size / 1024 / 1024:.2f} MB

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>
–ü—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ.
–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"backup_restore_uploaded_{temp_path.name}"),
                InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"backup_restore_uploaded_clear_{temp_path.name}")
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="backup_panel")
            ]
        ])
        
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –±–µ–∫–∞–ø–∞: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="backup_panel")]
            ])
        )


@admin_required
@error_handler
async def restore_uploaded_backup(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –±–µ–∫–∞–ø"""
    if callback.data.startswith("backup_restore_uploaded_clear_"):
        filename = callback.data.replace("backup_restore_uploaded_clear_", "")
        clear_existing = True
    else:
        filename = callback.data.replace("backup_restore_uploaded_", "")
        clear_existing = False
    
    await callback.answer("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...")
    
    temp_path = backup_service.backup_dir / filename
    
    if not temp_path.exists():
        await callback.message.edit_text(
            "‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_backup_main_keyboard(db_user.language)
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    action_text = "–æ—á–∏—Å—Ç–∫–æ–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º" if clear_existing else "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"
    progress_msg = await callback.message.edit_text(
        f"üì• <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...</b>\n\n"
        f"‚è≥ –†–∞–±–æ—Ç–∞–µ–º —Å {action_text} –¥–∞–Ω–Ω—ã—Ö...\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
        parse_mode="HTML"
    )
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        success, message = await backup_service.restore_backup(
            str(temp_path),
            clear_existing=clear_existing
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            temp_path.unlink()
        except:
            pass
        
        if success:
            await progress_msg.edit_text(
                f"‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n{message}",
                parse_mode="HTML",
                reply_markup=get_backup_main_keyboard(db_user.language)
            )
        else:
            await progress_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n{message}",
                parse_mode="HTML",
                reply_markup=get_backup_main_keyboard(db_user.language)
            )
    
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            temp_path.unlink()
        except:
            pass
        
        await progress_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n{str(e)}",
            parse_mode="HTML",
            reply_markup=get_backup_main_keyboard(db_user.language)
        )


@admin_required
@error_handler
async def show_backup_settings(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∫–∞–ø–æ–≤"""
    settings_obj = await backup_service.get_backup_settings()
    
    text = f"""‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∫–∞–ø–æ–≤</b>

üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–∫–∞–ø—ã:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings_obj.auto_backup_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {settings_obj.backup_interval_hours} —á–∞—Å–æ–≤
‚Ä¢ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {settings_obj.backup_time}

üì¶ <b>–•—Ä–∞–Ω–µ–Ω–∏–µ:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–æ–≤: {settings_obj.max_backups_keep}
‚Ä¢ –°–∂–∞—Ç–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if settings_obj.compression_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}
‚Ä¢ –í–∫–ª—é—á–∞—Ç—å –ª–æ–≥–∏: {'‚úÖ –î–∞' if settings_obj.include_logs else '‚ùå –ù–µ—Ç'}

üìÅ <b>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> <code>{settings_obj.backup_location}</code>
"""
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_backup_settings_keyboard(settings_obj)
    )
    await callback.answer()


@admin_required
@error_handler
async def toggle_backup_setting(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∫–∞–ø–æ–≤"""
    settings_obj = await backup_service.get_backup_settings()
    
    if callback.data == "backup_toggle_auto":
        new_value = not settings_obj.auto_backup_enabled
        await backup_service.update_backup_settings(auto_backup_enabled=new_value)
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"–ê–≤—Ç–æ–±–µ–∫–∞–ø—ã {status}")
        
    elif callback.data == "backup_toggle_compression":
        new_value = not settings_obj.compression_enabled
        await backup_service.update_backup_settings(compression_enabled=new_value)
        status = "–≤–∫–ª—é—á–µ–Ω–æ" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
        await callback.answer(f"–°–∂–∞—Ç–∏–µ {status}")
        
    elif callback.data == "backup_toggle_logs":
        new_value = not settings_obj.include_logs
        await backup_service.update_backup_settings(include_logs=new_value)
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"–õ–æ–≥–∏ –≤ –±–µ–∫–∞–ø–µ {status}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await show_backup_settings(callback, db_user, db)


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∫–∞–ø–æ–≤"""
    
    # –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
    dp.callback_query.register(
        show_backup_panel,
        F.data == "backup_panel"
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞
    dp.callback_query.register(
        create_backup_handler,
        F.data == "backup_create"
    )
    
    # –°–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤
    dp.callback_query.register(
        show_backup_list,
        F.data.startswith("backup_list")
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∫–∞–ø–æ–º
    dp.callback_query.register(
        manage_backup_file,
        F.data.startswith("backup_manage_")
    )
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –±–µ–∫–∞–ø–∞
    dp.callback_query.register(
        delete_backup_confirm,
        F.data.startswith("backup_delete_") & ~F.data.startswith("backup_delete_confirm_")
    )
    
    dp.callback_query.register(
        delete_backup_execute,
        F.data.startswith("backup_delete_confirm_")
    )
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    dp.callback_query.register(
        restore_backup_start,
        F.data.in_(["backup_restore"]) | F.data.startswith("backup_restore_file_")
    )
    
    dp.callback_query.register(
        restore_backup_execute,
        F.data.startswith("backup_restore_execute_") | F.data.startswith("backup_restore_clear_")
    )
    
    dp.callback_query.register(
        restore_uploaded_backup,
        F.data.startswith("backup_restore_uploaded_")
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    dp.callback_query.register(
        show_backup_settings,
        F.data == "backup_settings"
    )
    
    dp.callback_query.register(
        toggle_backup_setting,
        F.data.in_(["backup_toggle_auto", "backup_toggle_compression", "backup_toggle_logs"])
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    dp.message.register(
        handle_backup_file_upload,
        BackupStates.waiting_backup_file
    )d=[
        [
            InlineKeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø", callback_data="backup_create"),
            InlineKeyboardButton(text="üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="backup_restore")
        ],
        [
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø–æ–≤", callback_data="backup_list"),
            InlineKeyboardButton(text="üìä –ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="backup_logs")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="backup_settings"),
            InlineKeyboardButton(text="üîÑ –ê–≤—Ç–æ–±–µ–∫–∞–ø—ã", callback_data="backup_auto_toggle")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])


def get_backup_list_keyboard(backups: list, page: int = 1, per_page: int = 5):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –±–µ–∫–∞–ø–æ–≤"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = []
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    start_idx = (page - 1) * per_page
    end_idx = start_idx + per_page
    page_backups = backups[start_idx:end_idx]
    
    for backup in page_backups:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        try:
            if backup.get("timestamp"):
                dt = datetime.fromisoformat(backup["timestamp"].replace('Z', '+00:00'))
                date_str = dt.strftime("%d.%m %H:%M")
            else:
                date_str = "?"
        except:
            date_str = "?"
        
        size_str = f"{backup.get('file_size_mb', 0):.1f}MB"
        records_str = backup.get('total_records', '?')
        
        button_text = f"üì¶ {date_str} ‚Ä¢ {size_str} ‚Ä¢ {records_str} –∑–∞–ø–∏—Å–µ–π"
        callback_data = f"backup_manage_{backup['filename']}"
        
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if len(backups) > per_page:
        total_pages = (len(backups) + per_page - 1) // per_page
        nav_row = []
        
        if page > 1:
            nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"backup_list_page_{page-1}"))
        
        nav_row.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="noop"))
        
        if page < total_pages:
            nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"backup_list_page_{page+1}"))
        
        keyboard.append(nav_row)
    
    # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    keyboard.extend([
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="backup_list")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup_panel")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboar
