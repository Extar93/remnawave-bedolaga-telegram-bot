import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.keyboards.inline import get_back_keyboard
from app.localization.texts import get_texts
from app.services.payment_service import PaymentService
from app.utils.decorators import error_handler
from app.states import BalanceStates

logger = logging.getLogger(__name__)


@error_handler
async def start_cryptobot_payment(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    texts = get_texts(db_user.language)
    
    if not settings.is_cryptobot_enabled():
        await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    from app.utils.currency_converter import currency_converter
    try:
        current_rate = await currency_converter.get_usd_to_rub_rate()
        rate_text = f"üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 USD = {current_rate:.2f} ‚ÇΩ"
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç: {e}")
        current_rate = 95.0
        rate_text = f"üí± –ö—É—Ä—Å: 1 USD ‚âà {current_rate:.0f} ‚ÇΩ"
    
    available_assets = settings.get_cryptobot_assets()
    assets_text = ", ".join(available_assets)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if settings.YOOKASSA_QUICK_AMOUNT_SELECTION_ENABLED and not settings.DISABLE_TOPUP_BUTTONS:
        message_text = (
            f"ü™ô <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é —Å—É–º–º—É "
            f"–æ—Ç 100 –¥–æ 100,000 ‚ÇΩ:\n\n"
            f"üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã: {assets_text}\n"
            f"‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
            f"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot\n\n"
            f"{rate_text}\n"
            f"–°—É–º–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ USD –¥–ª—è –æ–ø–ª–∞—Ç—ã."
        )
    else:
        message_text = (
            f"ü™ô <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 100 –¥–æ 100,000 ‚ÇΩ:\n\n"
            f"üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã: {assets_text}\n"
            f"‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
            f"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot\n\n"
            f"{rate_text}\n"
            f"–°—É–º–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ USD –¥–ª—è –æ–ø–ª–∞—Ç—ã."
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_back_keyboard(db_user.language)
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —Å—É–º–º—ã –∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    if settings.YOOKASSA_QUICK_AMOUNT_SELECTION_ENABLED and not settings.DISABLE_TOPUP_BUTTONS:
        from .main import get_quick_amount_buttons
        quick_amount_buttons = get_quick_amount_buttons(db_user.language)
        if quick_amount_buttons:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard.inline_keyboard = quick_amount_buttons + keyboard.inline_keyboard
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(BalanceStates.waiting_for_amount)
    await state.update_data(payment_method="cryptobot", current_rate=current_rate)
    await callback.answer()


@error_handler
async def process_cryptobot_payment_amount(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    amount_kopeks: int,
    state: FSMContext
):
    texts = get_texts(db_user.language)
    
    if not settings.is_cryptobot_enabled():
        await message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    amount_rubles = amount_kopeks / 100
    
    if amount_rubles < 100:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 ‚ÇΩ")
        return
    
    if amount_rubles > 100000:
        await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100,000 ‚ÇΩ")
        return
    
    try:
        data = await state.get_data()
        current_rate = data.get('current_rate')
        
        if not current_rate:
            from app.utils.currency_converter import currency_converter
            current_rate = await currency_converter.get_usd_to_rub_rate()
        
        amount_usd = amount_rubles / current_rate
        
        amount_usd = round(amount_usd, 2)
        
        if amount_usd < 1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ USD: 1.00 USD")
            return
        
        if amount_usd > 1000:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ USD: 1,000 USD")
            return
        
        payment_service = PaymentService(message.bot)
        
        payment_result = await payment_service.create_cryptobot_payment(
            db=db,
            user_id=db_user.id,
            amount_usd=amount_usd,
            asset=settings.CRYPTOBOT_DEFAULT_ASSET,
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount_rubles:.0f} ‚ÇΩ ({amount_usd:.2f} USD)",
            payload=f"balance_{db_user.id}_{amount_kopeks}"
        )
        
        if not payment_result:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            await state.clear()
            return
        
        bot_invoice_url = payment_result.get("bot_invoice_url")
        mini_app_invoice_url = payment_result.get("mini_app_invoice_url")
        
        payment_url = bot_invoice_url or mini_app_invoice_url
        
        if not payment_url:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            await state.clear()
            return
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="ü™ô –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
            [types.InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_cryptobot_{payment_result['local_payment_id']}")],
            [types.InlineKeyboardButton(text=texts.BACK, callback_data="balance_topup")]
        ])
        
        await message.answer(
            f"ü™ô <b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π</b>\n\n"
            f"üí∞ –°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: {amount_rubles:.0f} ‚ÇΩ\n"
            f"üíµ –ö –æ–ø–ª–∞—Ç–µ: {amount_usd:.2f} USD\n"
            f"ü™ô –ê–∫—Ç–∏–≤: {payment_result['asset']}\n"
            f"üí± –ö—É—Ä—Å: 1 USD = {current_rate:.2f} ‚ÇΩ\n"
            f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_result['invoice_id'][:8]}...\n\n"
            f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
            f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å'\n"
            f"2. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –∞–∫—Ç–∏–≤\n"
            f"3. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É\n"
            f"4. –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            f"üîí –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É CryptoBot\n"
            f"‚ö° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã: USDT, TON, BTC, ETH\n\n"
            f"‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ {settings.get_support_contact_display_html()}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.clear()
        
        logger.info(f"–°–æ–∑–¥–∞–Ω CryptoBot –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user.telegram_id}: "
                   f"{amount_rubles:.0f} ‚ÇΩ ({amount_usd:.2f} USD), ID: {payment_result['invoice_id']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CryptoBot –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await state.clear()


@error_handler
async def check_cryptobot_payment_status(
    callback: types.CallbackQuery,
    db: AsyncSession
):
    try:
        local_payment_id = int(callback.data.split('_')[-1])
        
        from app.database.crud.cryptobot import get_cryptobot_payment_by_id
        payment = await get_cryptobot_payment_by_id(db, local_payment_id)
        
        if not payment:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        status_emoji = {
            "active": "‚è≥",
            "paid": "‚úÖ",
            "expired": "‚ùå"
        }
        
        status_text = {
            "active": "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            "paid": "–û–ø–ª–∞—á–µ–Ω",
            "expired": "–ò—Å—Ç–µ–∫"
        }
        
        emoji = status_emoji.get(payment.status, "‚ùì")
        status = status_text.get(payment.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        message_text = (f"ü™ô –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:\n\n"
                       f"üÜî ID: {payment.invoice_id[:8]}...\n"
                       f"üí∞ –°—É–º–º–∞: {payment.amount} {payment.asset}\n"
                       f"üìä –°—Ç–∞—Ç—É—Å: {emoji} {status}\n"
                       f"üìÖ –°–æ–∑–¥–∞–Ω: {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n")
        
        if payment.is_paid:
            message_text += "\n‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."
        elif payment.is_pending:
            message_text += "\n‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –≤—ã—à–µ."
        elif payment.is_expired:
            message_text += (
                f"\n‚ùå –ü–ª–∞—Ç–µ–∂ –∏—Å—Ç–µ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ {settings.get_support_contact_display()}"
            )
        
        await callback.answer(message_text, show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ CryptoBot –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)