import logging
from datetime import datetime
from typing import Optional
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import WelcomeText

logger = logging.getLogger(__name__)

WELCOME_TEXT_KEY = "welcome_text"

async def get_active_welcome_text(db: AsyncSession) -> Optional[str]:
    result = await db.execute(
        select(WelcomeText)
        .where(WelcomeText.is_active == True)
        .order_by(WelcomeText.updated_at.desc())
    )
    welcome_text = result.scalar_one_or_none()
    
    if welcome_text:
        return welcome_text.text_content
    
    return None

async def set_welcome_text(db: AsyncSession, text_content: str, admin_id: int) -> bool:
    try:
        await db.execute(
            update(WelcomeText).values(is_active=False)
        )
        
        new_welcome_text = WelcomeText(
            text_content=text_content,
            is_active=True,
            created_by=admin_id
        )
        
        db.add(new_welcome_text)
        await db.commit()
        await db.refresh(new_welcome_text)
        
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
        await db.rollback()
        return False

async def get_current_welcome_text_or_default() -> str:
    return (
        f"–ü—Ä–∏–≤–µ—Ç, {{user_name}}! üéÅ 3 –¥–Ω–µ–π VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ! "
        f"–ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∑–∞ –º–∏–Ω—É—Ç—É –∏ –∑–∞–±—É–¥—å—Ç–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö. "
        f"‚úÖ –î–æ 1 –ì–±–∏—Ç/—Å —Å–∫–æ—Ä–æ—Å—Ç—å "
        f"‚úÖ –£–º–Ω—ã–π VPN ‚Äî –º–æ–∂–Ω–æ –Ω–µ –æ—Ç–∫–ª—é—á–∞—Ç—å –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ "
        f"‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã ‚Äî –º–∞–∫—Å–∏–º—É–º –∑–∞—â–∏—Ç—ã –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ "
        f"üëâ –í—Å–µ–≥–æ 99‚ÇΩ/–º–µ—Å –∑–∞ 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "
        f"üëá –ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å!"
    )

def replace_placeholders(text: str, user) -> str:
    first_name = getattr(user, 'first_name', None)
    username = getattr(user, 'username', None)
    
    first_name = first_name.strip() if first_name else None
    username = username.strip() if username else None
    
    user_name = first_name or username or "–¥—Ä—É–≥"
    display_first_name = first_name or "–¥—Ä—É–≥"
    display_username = f"@{username}" if username else (first_name or "–¥—Ä—É–≥")
    clean_username = username or first_name or "–¥—Ä—É–≥"
    
    replacements = {
        '{user_name}': user_name,
        '{first_name}': display_first_name, 
        '{username}': display_username,
        '{username_clean}': clean_username,
        'Egor': user_name  
    }
    
    result = text
    for placeholder, value in replacements.items():
        result = result.replace(placeholder, value)
    
    return result

async def get_welcome_text_for_user(db: AsyncSession, user) -> str:
    welcome_text = await get_active_welcome_text(db)
    
    if not welcome_text:
        welcome_text = await get_current_welcome_text_or_default()
    
    if isinstance(user, str):
        class SimpleUser:
            def __init__(self, name):
                self.first_name = name
                self.username = None
        user = SimpleUser(user)
    
    return replace_placeholders(welcome_text, user)

def get_available_placeholders() -> dict:
    return {
        '{user_name}': '–ò–º—è –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∏–º—è ‚Üí username ‚Üí "–¥—Ä—É–≥")',
        '{first_name}': '–¢–æ–ª—å–∫–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ "–¥—Ä—É–≥" –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)',
        '{username}': 'Username —Å —Å–∏–º–≤–æ–ª–æ–º @ (–∏–ª–∏ –∏–º—è –µ—Å–ª–∏ username –Ω–µ —É–∫–∞–∑–∞–Ω)',
        '{username_clean}': 'Username –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @ (–∏–ª–∏ –∏–º—è –µ—Å–ª–∏ username –Ω–µ —É–∫–∞–∑–∞–Ω)'
    }
