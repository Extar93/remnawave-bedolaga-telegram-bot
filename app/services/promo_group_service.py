import logging
from datetime import datetime
from typing import Optional

from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.crud.promo_group import get_auto_assign_promo_group
from app.database.crud.transaction import get_user_total_completed_deposits
from app.database.models import PromoGroup, User
from app.localization.texts import get_texts

logger = logging.getLogger(__name__)


def _format_total_amount(total_amount_kopeks: int) -> str:
    return settings.format_price(total_amount_kopeks)


async def maybe_assign_auto_promo_group(
    db: AsyncSession,
    user: User,
    bot: Optional[Bot] = None,
) -> Optional[PromoGroup]:
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–º–æ–≥—Ä—É–ø–ø—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ–π —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π."""
    try:
        if getattr(user, "promo_group_auto_assigned", False):
            return None

        total_amount_kopeks = await get_user_total_completed_deposits(db, user.id)
        target_group = await get_auto_assign_promo_group(db, total_amount_kopeks)

        if not target_group or target_group.id == user.promo_group_id:
            return None

        user.promo_group_id = target_group.id
        user.promo_group = target_group
        user.promo_group_auto_assigned = True
        user.updated_at = datetime.utcnow()

        await db.commit()
        await db.refresh(user)

        logger.info(
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø—Ä–æ–º–æ–≥—Ä—É–ø–ø–∞ '%s' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s (—Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: %s)",
            target_group.name,
            user.telegram_id,
            _format_total_amount(total_amount_kopeks),
        )

        if bot:
            try:
                texts = get_texts(user.language)
                message = texts.t(
                    "PROMO_GROUP_AUTO_ASSIGN_NOTIFICATION",
                    "üéâ –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –ø—Ä–æ–º–æ–≥—Ä—É–ø–ø—É ¬´{name}¬ª –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ {amount}.",
                ).format(name=target_group.name, amount=_format_total_amount(total_amount_kopeks))
                await bot.send_message(user.telegram_id, message, parse_mode="HTML")
            except Exception as notify_error:
                logger.error(
                    "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s",
                    user.telegram_id,
                    notify_error,
                )

        return target_group

    except Exception as error:
        logger.error(
            "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s",
            getattr(user, "telegram_id", "unknown"),
            error,
            exc_info=True,
        )
        await db.rollback()
        return None
