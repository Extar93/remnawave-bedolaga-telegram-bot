"""–û–±—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.

–í —ç—Ç–æ–º –º–æ–¥—É–ª–µ —Å–æ–±—Ä–∞–Ω—ã –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –≤—Å–µ–º –ø–ª–∞—Ç—ë–∂–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º:
–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä, –±–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
—É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.
"""

from __future__ import annotations

import logging
from typing import Any

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from app.config import settings
from app.database.crud.user import get_user_by_telegram_id
from app.database.database import get_db
from app.localization.texts import get_texts
from app.services.subscription_checkout_service import (
    has_subscription_checkout_draft,
    should_offer_checkout_resume,
)
from app.utils.miniapp_buttons import build_miniapp_or_callback_button

logger = logging.getLogger(__name__)


class PaymentCommonMixin:
    """Mixin —Å –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π, –∫–æ—Ç–æ—Ä—É—é –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ –±–ª–æ–∫–∏."""

    async def build_topup_success_keyboard(self, user: Any) -> InlineKeyboardMarkup:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—è—Å—å –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω—É–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        texts = get_texts(user.language if user else "ru")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É.
        has_active_subscription = bool(
            user and user.subscription and not user.subscription.is_trial and user.subscription.is_active
        )

        first_button = build_miniapp_or_callback_button(
            text=(
                texts.MENU_EXTEND_SUBSCRIPTION
                if has_active_subscription
                else texts.MENU_BUY_SUBSCRIPTION
            ),
            callback_data=(
                "subscription_extend" if has_active_subscription else "menu_buy"
            ),
        )

        keyboard_rows: list[list[InlineKeyboardButton]] = [[first_button]]

        # –ï—Å–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π checkout, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–º—É.
        if user:
            draft_exists = await has_subscription_checkout_draft(user.id)
            if should_offer_checkout_resume(user, draft_exists):
                keyboard_rows.append([
                    build_miniapp_or_callback_button(
                        text=texts.RETURN_TO_SUBSCRIPTION_CHECKOUT,
                        callback_data="subscription_resume_checkout",
                    )
                ])

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–ª–∞–Ω—Å—É –∏ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.
        keyboard_rows.append([
            build_miniapp_or_callback_button(
                text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å",
                callback_data="menu_balance",
            )
        ])
        keyboard_rows.append([
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_menu",
            )
        ])

        return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    async def _send_payment_success_notification(
        self,
        telegram_id: int,
        amount_kopeks: int,
        user: Any | None = None,
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ."""
        if not getattr(self, "bot", None):
            # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–Ω—É—Ç—Ä–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á), —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
            return

        if user is None:
            try:
                async for db in get_db():
                    user = await get_user_by_telegram_id(db, telegram_id)
                    break
            except Exception as fetch_error:
                logger.warning(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s",
                    telegram_id,
                    fetch_error,
                )
                user = None

        try:
            keyboard = await self.build_topup_success_keyboard(user)

            message = (
                "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                f"üí∞ –°—É–º–º–∞: {settings.format_price(amount_kopeks)}\n"
                "üí≥ –°–ø–æ—Å–æ–±: –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (YooKassa)\n\n"
                "–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!"
            )

            await self.bot.send_message(
                chat_id=telegram_id,
                text=message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        except Exception as error:
            logger.error(
                "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s",
                telegram_id,
                error,
            )

    async def process_successful_payment(
        self,
        payment_id: str,
        amount_kopeks: int,
        user_id: int,
        payment_method: str,
    ) -> bool:
        """–û–±—â–∞—è —Ç–æ—á–∫–∞ —É—á—ë—Ç–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)."""
        try:
            logger.info(
                "–û–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: %s, %s‚ÇΩ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s, –º–µ—Ç–æ–¥ %s",
                payment_id,
                amount_kopeks / 100,
                user_id,
                payment_method,
            )
            return True
        except Exception as error:
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ %s: %s", payment_id, error)
            return False
