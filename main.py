import asyncio
import logging
import sys
import os
import signal
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from app.bot import setup_bot
from app.config import settings
from app.database.database import init_db
from app.services.monitoring_service import monitoring_service
from app.services.maintenance_service import maintenance_service
from app.services.payment_service import PaymentService
from app.external.webhook_server import WebhookServer
from app.database.universal_migration import run_universal_migration


class GracefulExit:
    
    def __init__(self):
        self.exit = False
        
    def exit_gracefully(self, signum, frame):
        logging.getLogger(__name__).info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.exit = True


async def main():
    logging.basicConfig(
        level=getattr(logging, settings.LOG_LEVEL),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(settings.LOG_FILE, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    logger = logging.getLogger(__name__)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Bedolaga Remnawave Bot...")
    
    killer = GracefulExit()
    signal.signal(signal.SIGINT, killer.exit_gracefully)
    signal.signal(signal.SIGTERM, killer.exit_gracefully)
    
    webhook_server = None
    monitoring_task = None
    maintenance_task = None
    polling_task = None
    
    try:
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_db()
        
        skip_migration = os.getenv('SKIP_MIGRATION', 'false').lower() == 'true'
        
        if not skip_migration:
            logger.info("üîß –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            try:
                migration_success = await run_universal_migration()
                
                if migration_success:
                    logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫")
                    
            except Exception as migration_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_error}")
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏")
        else:
            logger.info("‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ (SKIP_MIGRATION=true)")
        
        logger.info("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞...")
        bot, dp = await setup_bot()
        
        logger.info("üí≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π...")
        payment_service = PaymentService(bot)
        
        monitoring_service.bot = bot
        maintenance_service.set_bot(bot) 
        
        webhook_servers_enabled = settings.TRIBUTE_ENABLED or settings.is_yookassa_enabled()
        
        if webhook_servers_enabled:
            logger.info("üåê –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            webhook_server = WebhookServer(bot, payment_service)
            
            await webhook_server.start()
            
            if settings.TRIBUTE_ENABLED:
                logger.info(f"‚úÖ Tribute webhook: http://0.0.0.0:{settings.TRIBUTE_WEBHOOK_PORT}{settings.TRIBUTE_WEBHOOK_PATH}")
            if settings.is_yookassa_enabled():
                logger.info(f"‚úÖ YooKassa webhook: http://0.0.0.0:{settings.YOOKASSA_WEBHOOK_PORT}{settings.YOOKASSA_WEBHOOK_PATH}")
        else:
            logger.info("‚ÑπÔ∏è –í—Å–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã, webhook —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è")
        
        logger.info("üîç –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        monitoring_task = asyncio.create_task(monitoring_service.start_monitoring())
        
        logger.info("üîß –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã —Ç–µ—Ö—Ä–∞–±–æ—Ç...")
        maintenance_task = asyncio.create_task(maintenance_service.start_monitoring())
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
        polling_task = asyncio.create_task(dp.start_polling(bot, skip_updates=True))
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        
        try:
            while not killer.exit:
                await asyncio.sleep(1)
                
                if monitoring_task.done():
                    exception = monitoring_task.exception()
                    if exception:
                        logger.error(f"–°–ª—É–∂–±–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {exception}")
                        monitoring_task = asyncio.create_task(monitoring_service.start_monitoring())
                        
                if maintenance_task.done():
                    exception = maintenance_task.exception()
                    if exception:
                        logger.error(f"–°–ª—É–∂–±–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {exception}")
                        maintenance_task = asyncio.create_task(maintenance_service.start_monitoring())
                        
                if polling_task.done():
                    exception = polling_task.exception()
                    if exception:
                        logger.error(f"Polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {exception}")
                        break
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise
        
    finally:
        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        if monitoring_task and not monitoring_task.done():
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            monitoring_service.stop_monitoring()
            monitoring_task.cancel()
            try:
                await monitoring_task
            except asyncio.CancelledError:
                pass
        
        if maintenance_task and not maintenance_task.done():
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã —Ç–µ—Ö—Ä–∞–±–æ—Ç...")
            await maintenance_service.stop_monitoring()
            maintenance_task.cancel()
            try:
                await maintenance_task
            except asyncio.CancelledError:
                pass
        
        if polling_task and not polling_task.done():
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling...")
            polling_task.cancel()
            try:
                await polling_task
            except asyncio.CancelledError:
                pass
        
        if webhook_server:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–æ–≤...")
            await webhook_server.stop()
        
        if 'bot' in locals():
            try:
                await bot.session.close()
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")
        
        logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
