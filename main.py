import asyncio
import logging
import sys
import os
import signal
from pathlib import Path
from textwrap import wrap

sys.path.append(str(Path(__file__).parent))

from app.bot import setup_bot
from app.config import settings
from app.database.database import init_db
from app.services.monitoring_service import monitoring_service
from app.services.maintenance_service import maintenance_service
from app.services.payment_service import PaymentService
from app.services.version_service import version_service
from app.external.webhook_server import WebhookServer
from app.external.yookassa_webhook import start_yookassa_webhook_server
from app.external.pal24_webhook import start_pal24_webhook_server, Pal24WebhookServer
from app.database.universal_migration import run_universal_migration
from app.services.backup_service import backup_service
from app.services.reporting_service import reporting_service
from app.localization.loader import ensure_locale_templates
from app.services.system_settings_service import bot_configuration_service
from app.services.broadcast_service import broadcast_service


LOG_FRAME_WIDTH = 74


def _wrap_line(text: str, width: int) -> list[str]:
    wrapped = wrap(
        text,
        width=width,
        break_long_words=False,
        replace_whitespace=False,
        drop_whitespace=True,
    )
    return wrapped or [""]


def build_banner(title: str, subtitle: str | None = None) -> str:
    width = LOG_FRAME_WIDTH
    top = "‚ïî" + "‚ïê" * (width - 2) + "‚ïó"
    empty = f"‚ïë{' ' * (width - 2)}‚ïë"
    title_line = f"‚ïë {title.center(width - 4)} ‚ïë"
    lines = [top, empty, title_line]

    if subtitle:
        subtitle_lines = _wrap_line(subtitle, width - 4)
        for line in subtitle_lines:
            lines.append(f"‚ïë {line.center(width - 4)} ‚ïë")

    lines.extend([empty, "‚ïö" + "‚ïê" * (width - 2) + "‚ïù"])
    return "\n".join(lines)


def build_summary_box(title: str, sections: list[tuple[str, list[str]]]) -> str:
    width = LOG_FRAME_WIDTH
    inner_width = width - 4
    bullet_width = width - 6

    lines = ["‚ïî" + "‚ïê" * (width - 2) + "‚ïó"]

    for segment in _wrap_line(f"‚ú® {title}", inner_width):
        lines.append(f"‚ïë {segment.ljust(inner_width)} ‚ïë")

    if sections:
        lines.append("‚ï†" + "‚ïê" * (width - 2) + "‚ï£")

    for index, (section_title, entries) in enumerate(sections):
        for section_line in _wrap_line(section_title, inner_width):
            lines.append(f"‚ïë {section_line.ljust(inner_width)} ‚ïë")

        if entries:
            for entry in entries:
                wrapped_entry = _wrap_line(entry, bullet_width - 2)
                for i, part in enumerate(wrapped_entry):
                    prefix = "‚Ä¢ " if i == 0 else "  "
                    available_width = bullet_width - len(prefix)
                    lines.append(
                        f"‚ïë   {prefix}{part.ljust(available_width)} ‚ïë"
                    )
        else:
            lines.append(f"‚ïë   {'‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî'.ljust(bullet_width)} ‚ïë")

        if index < len(sections) - 1:
            lines.append("‚ïü" + "‚îÄ" * (width - 2) + "‚ï¢")

    lines.append("‚ïö" + "‚ïê" * (width - 2) + "‚ïù")
    return "\n".join(lines)


def format_status_line(name: str, enabled: bool, detail: str | None = None) -> str:
    status_icon = "‚úÖ" if enabled else "‚õî"
    status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if enabled else "–û—Ç–∫–ª—é—á–µ–Ω"

    if detail:
        status_text = f"{status_text} ‚Äî {detail}"

    return f"{status_icon} {name}: {status_text}"


class GracefulExit:
    
    def __init__(self):
        self.exit = False
        
    def exit_gracefully(self, signum, frame):
        logging.getLogger(__name__).info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.exit = True


async def main():
    logging.basicConfig(
        level=getattr(logging, settings.LOG_LEVEL),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(settings.LOG_FILE, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    logger = logging.getLogger(__name__)
    logger.info(
        build_banner(
            "üöÄ Bedolaga Remnawave Bot",
            "–°—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞",
        )
    )
    
    try:
        ensure_locale_templates()
    except Exception as error:
        logger.warning("Failed to prepare locale templates: %s", error)

    killer = GracefulExit()
    signal.signal(signal.SIGINT, killer.exit_gracefully)
    signal.signal(signal.SIGTERM, killer.exit_gracefully)
    
    webhook_server = None
    yookassa_server_task = None
    pal24_server: Pal24WebhookServer | None = None
    monitoring_task = None
    maintenance_task = None
    version_check_task = None
    polling_task = None
    web_api_server = None

    webhook_endpoints: list[tuple[str, str]] = []
    webhook_services: list[str] = []
    web_api_url: str | None = None
    backup_settings = None
    auto_backup_enabled: bool | None = None
    backup_status_detail: str | None = None
    maintenance_status_detail: str | None = None
    maintenance_running = False
    yookassa_started = False
    pal24_started = False
    
    try:
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_db()
        
        skip_migration = os.getenv('SKIP_MIGRATION', 'false').lower() == 'true'
        
        if not skip_migration:
            logger.info("üîß –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            try:
                migration_success = await run_universal_migration()
                
                if migration_success:
                    logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫")
                    
            except Exception as migration_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_error}")
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏")
        else:
            logger.info("‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ (SKIP_MIGRATION=true)")
        
        logger.info("‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î...")
        try:
            await bot_configuration_service.initialize()
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as error:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {error}")

        logger.info("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞...")
        bot, dp = await setup_bot()

        monitoring_service.bot = bot
        maintenance_service.set_bot(bot)
        broadcast_service.set_bot(bot)

        from app.services.admin_notification_service import AdminNotificationService
        admin_notification_service = AdminNotificationService(bot)
        version_service.bot = bot
        version_service.set_notification_service(admin_notification_service)
        logger.info(f"üìÑ –°–µ—Ä–≤–∏—Å –≤–µ—Ä—Å–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {version_service.repo}")
        logger.info(f"üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version_service.current_version}")
        
        logger.info("üîó –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–∏—Å–∞–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç")

        logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤...")
        try:
            backup_service.bot = bot

            backup_settings = await backup_service.get_backup_settings()
            auto_backup_enabled = backup_settings.auto_backup_enabled

            if auto_backup_enabled:
                await backup_service.start_auto_backup()
                logger.info("‚úÖ –ê–≤—Ç–æ–±–µ–∫–∞–ø—ã –∑–∞–ø—É—â–µ–Ω—ã")
                backup_status_detail = (
                    f"–∏–Ω—Ç–µ—Ä–≤–∞–ª {backup_settings.backup_interval_hours}—á, –≤—Ä–µ–º—è {backup_settings.backup_time}"
                )
            else:
                backup_status_detail = "–æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"

            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –±–µ–∫–∞–ø–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤: {e}")

        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤...")
        try:
            reporting_service.set_bot(bot)
            await reporting_service.start()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")

        payment_service = PaymentService(bot)
        
        webhook_needed = (
            settings.TRIBUTE_ENABLED
            or settings.is_cryptobot_enabled()
            or settings.is_mulenpay_enabled()
        )
        
        if webhook_needed:
            enabled_services = []
            if settings.TRIBUTE_ENABLED:
                enabled_services.append("Tribute")
                webhook_endpoints.append(
                    (
                        "Tribute",
                        f"{settings.WEBHOOK_URL}:{settings.TRIBUTE_WEBHOOK_PORT}{settings.TRIBUTE_WEBHOOK_PATH}",
                    )
                )
            if settings.is_mulenpay_enabled():
                enabled_services.append("Mulen Pay")
                webhook_endpoints.append(
                    (
                        "Mulen Pay",
                        f"{settings.WEBHOOK_URL}:{settings.TRIBUTE_WEBHOOK_PORT}{settings.MULENPAY_WEBHOOK_PATH}",
                    )
                )
            if settings.is_cryptobot_enabled():
                enabled_services.append("CryptoBot")
                webhook_endpoints.append(
                    (
                        "CryptoBot",
                        f"{settings.WEBHOOK_URL}:{settings.TRIBUTE_WEBHOOK_PORT}{settings.CRYPTOBOT_WEBHOOK_PATH}",
                    )
                )

            webhook_services = enabled_services.copy()
            logger.info(
                f"üåê –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è: {', '.join(enabled_services)}..."
            )
            webhook_server = WebhookServer(bot)
            await webhook_server.start()
        else:
            logger.info("‚ÑπÔ∏è Tribute –∏ CryptoBot –æ—Ç–∫–ª—é—á–µ–Ω—ã, webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
        
        if settings.is_yookassa_enabled():
            logger.info("üí≥ –ó–∞–ø—É—Å–∫ YooKassa webhook —Å–µ—Ä–≤–µ—Ä–∞...")
            yookassa_server_task = asyncio.create_task(
                start_yookassa_webhook_server(payment_service)
            )
            webhook_endpoints.append(
                (
                    "YooKassa",
                    f"{settings.WEBHOOK_URL}:{settings.YOOKASSA_WEBHOOK_PORT}{settings.YOOKASSA_WEBHOOK_PATH}",
                )
            )
            yookassa_started = True
        else:
            logger.info("‚ÑπÔ∏è YooKassa –æ—Ç–∫–ª—é—á–µ–Ω–∞, webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")

        if settings.is_pal24_enabled():
            logger.info("üí≥ –ó–∞–ø—É—Å–∫ PayPalych webhook —Å–µ—Ä–≤–µ—Ä–∞...")
            pal24_server = await start_pal24_webhook_server(payment_service)
            webhook_endpoints.append(
                (
                    "PayPalych",
                    f"{settings.WEBHOOK_URL}:{settings.PAL24_WEBHOOK_PORT}{settings.PAL24_WEBHOOK_PATH}",
                )
            )
            pal24_started = True
        else:
            logger.info("‚ÑπÔ∏è PayPalych –æ—Ç–∫–ª—é—á–µ–Ω, webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")

        logger.info("üìä –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        monitoring_task = asyncio.create_task(monitoring_service.start_monitoring())
        
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±—ã —Ç–µ—Ö—Ä–∞–±–æ—Ç...")
        maintenance_running = False
        if not maintenance_service._check_task or maintenance_service._check_task.done():
            logger.info("üîß –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã —Ç–µ—Ö—Ä–∞–±–æ—Ç...")
            maintenance_task = asyncio.create_task(maintenance_service.start_monitoring())
            maintenance_running = True
            maintenance_status_detail = "–∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"
        else:
            logger.info("üîß –°–ª—É–∂–±–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            maintenance_task = None
            maintenance_running = True
            maintenance_status_detail = "—É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞"
        
        if settings.is_version_check_enabled():
            logger.info("üìÑ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–π...")
            version_check_task = asyncio.create_task(version_service.start_periodic_check())
        else:
            logger.info("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        
        if settings.is_web_api_enabled():
            try:
                from app.webapi import WebAPIServer

                web_api_server = WebAPIServer()
                await web_api_server.start()
                web_api_url = f"http://{settings.WEB_API_HOST}:{settings.WEB_API_PORT}"
                logger.info(
                    "üåê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –≤–µ–±-API –∑–∞–ø—É—â–µ–Ω–æ: %s",
                    web_api_url,
                )
            except Exception as error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-API: {error}")
        else:
            logger.info("‚ÑπÔ∏è –í–µ–±-API –æ—Ç–∫–ª—é—á–µ–Ω–æ")

        logger.info("üìÑ –ó–∞–ø—É—Å–∫ polling...")
        polling_task = asyncio.create_task(dp.start_polling(bot, skip_updates=True))
        
        background_services_lines = [
            format_status_line("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", monitoring_task is not None),
            format_status_line(
                "–¢–µ—Ö—Ä–∞–±–æ—Ç—ã",
                maintenance_running,
                maintenance_status_detail,
            ),
            format_status_line(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π",
                version_check_task is not None,
            ),
            format_status_line(
                "–û—Ç—á–µ—Ç—ã",
                reporting_service.is_running(),
            ),
        ]

        if auto_backup_enabled is not None:
            backup_lines = [
                format_status_line(
                    "–ê–≤—Ç–æ–±–µ–∫–∞–ø—ã",
                    bool(auto_backup_enabled),
                    backup_status_detail,
                )
            ]
        else:
            backup_lines = ["‚õî –ê–≤—Ç–æ–±–µ–∫–∞–ø—ã: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]

        admin_services_lines = [
            f"–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {version_service.current_version or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}",
            format_status_line(
                "Webhook —Å–µ—Ä–≤–µ—Ä –ø–ª–∞—Ç–µ–∂–µ–π",
                bool(webhook_services),
                ", ".join(webhook_services) if webhook_services else None,
            ),
            format_status_line(
                "YooKassa",
                yookassa_started,
            ),
            format_status_line(
                "PayPalych",
                pal24_started,
            ),
            format_status_line(
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ API",
                web_api_url is not None,
                web_api_url,
            ),
        ]

        summary_sections = [
            ("üåê –ê–∫—Ç–∏–≤–Ω—ã–µ webhook endpoints", [f"{name}: {url}" for name, url in webhook_endpoints]),
            ("üß∞ –§–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã", background_services_lines),
            ("üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã", admin_services_lines),
            ("üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", backup_lines),
        ]

        summary_message = build_summary_box("–ò—Ç–æ–≥–∏ –∑–∞–ø—É—Å–∫–∞", summary_sections)
        logger.info(summary_message)
        
        try:
            while not killer.exit:
                await asyncio.sleep(1)
                
                if yookassa_server_task and yookassa_server_task.done():
                    exception = yookassa_server_task.exception()
                    if exception:
                        logger.error(f"YooKassa webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {exception}")
                        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ YooKassa webhook —Å–µ—Ä–≤–µ—Ä–∞...")
                        yookassa_server_task = asyncio.create_task(
                            start_yookassa_webhook_server(payment_service)
                        )
                
                if monitoring_task.done():
                    exception = monitoring_task.exception()
                    if exception:
                        logger.error(f"–°–ª—É–∂–±–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {exception}")
                        monitoring_task = asyncio.create_task(monitoring_service.start_monitoring())
                        
                if maintenance_task and maintenance_task.done():
                    exception = maintenance_task.exception()
                    if exception:
                        logger.error(f"–°–ª—É–∂–±–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {exception}")
                        maintenance_task = asyncio.create_task(maintenance_service.start_monitoring())
                
                if version_check_task and version_check_task.done():
                    exception = version_check_task.exception()
                    if exception:
                        logger.error(f"–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {exception}")
                        if settings.is_version_check_enabled():
                            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–π...")
                            version_check_task = asyncio.create_task(version_service.start_periodic_check())
                        
                if polling_task.done():
                    exception = polling_task.exception()
                    if exception:
                        logger.error(f"Polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {exception}")
                        break
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise
        
    finally:
        logger.info("üõë –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        if yookassa_server_task and not yookassa_server_task.done():
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ YooKassa webhook —Å–µ—Ä–≤–µ—Ä–∞...")
            yookassa_server_task.cancel()
            try:
                await yookassa_server_task
            except asyncio.CancelledError:
                pass
        
        if monitoring_task and not monitoring_task.done():
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            monitoring_service.stop_monitoring()
            monitoring_task.cancel()
            try:
                await monitoring_task
            except asyncio.CancelledError:
                pass

        if pal24_server:
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PayPalych webhook —Å–µ—Ä–≤–µ—Ä–∞...")
            await asyncio.get_running_loop().run_in_executor(None, pal24_server.stop)
        
        if maintenance_task and not maintenance_task.done():
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã —Ç–µ—Ö—Ä–∞–±–æ—Ç...")
            await maintenance_service.stop_monitoring()
            maintenance_task.cancel()
            try:
                await maintenance_task
            except asyncio.CancelledError:
                pass
        
        if version_check_task and not version_check_task.done():
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–π...")
            version_check_task.cancel()
            try:
                await version_check_task
            except asyncio.CancelledError:
                pass

        logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤...")
        try:
            await reporting_service.stop()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")

        logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤...")
        try:
            await backup_service.stop_auto_backup()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∫–∞–ø–æ–≤: {e}")
        
        if polling_task and not polling_task.done():
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling...")
            polling_task.cancel()
            try:
                await polling_task
            except asyncio.CancelledError:
                pass
        
        if webhook_server:
            logger.info("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
            await webhook_server.stop()

        if web_api_server:
            try:
                await web_api_server.stop()
                logger.info("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –≤–µ–±-API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±-API: {error}")
        
        if 'bot' in locals():
            try:
                await bot.session.close()
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")
        
        logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
